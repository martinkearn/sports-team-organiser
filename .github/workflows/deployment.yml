# Based on steps outlined at https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/deploy-github-actions?tabs=userlevel%2CCLI

name: Azure Deployment

on:
  workflow_call:
      inputs:
        rg:
          type: string
          required: true
        uniquelabel:
          type: string
          required: true
        apicsprojpath:
          type: string
          required: true
        apidotnetoutputpath:
          type: string
          required: true
        blazorwasmcsprojpath:
          type: string
          required: true
        servicestestscsprojpath:
          type: string
          required: true
        blazorwasmdotnetoutputpath:
          type: string
          required: true
      secrets:
        azure-credentials:
          required: true
        azure-subscription:
          required: true
   
jobs:
  Deploy-Infrastructure-Apps:
# Setup
    runs-on: ubuntu-latest
    steps:

    - name: checkout
      uses: actions/checkout@main

    - name: azure-login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.azure-credentials }}
        
    - name: setup-dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
# Run unit tests
    - name: tests-restore-dependencies
      run: dotnet restore ${{ inputs.servicestestscsprojpath }}

    - name: tests-build-solution
      run: dotnet build ${{ inputs.servicestestscsprojpath }} --no-restore

    - name: tests-create-results-directory
      run: mkdir -p TestResults

    - name: tests-run-tests-with-coverage
      run: |
        dotnet test ${{ inputs.servicestestscsprojpath }} --no-build --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutput=$(pwd)/TestResults/coverage.cobertura.xml /p:CoverletOutputFormat=cobertura
      continue-on-error: true
      
    - name: tests-upload-results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: TestResults/coverage.cobertura.xml

    - name: tests-install-reportgenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: tests-generate-report
      run: reportgenerator "-reports:TestResults/coverage.cobertura.xml" "-targetdir:TestResults/coverage-report" "-reporttypes:Html"

    - name: tests-upload-report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: TestResults/coverage-report

# Bicep
    - name: bicep-install
      run: |
        az config set bicep.use_binary_from_path=False
        az bicep install

    - name: bicep-deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.azure-subscription }}
        resourceGroupName: ${{ inputs.rg }}
        template: ./bicep/main.bicep
        failOnStdErr: false
        parameters: 'uniqueName=${{ inputs.uniquelabel }}'

# API code
    - name: api-dotnet-build-publish
      run: |
        dotnet restore ${{ inputs.apicsprojpath }}
        dotnet build ${{ inputs.apicsprojpath }} --configuration Release
        dotnet publish ${{ inputs.apicsprojpath }} -c Release -o ${{ inputs.apidotnetoutputpath }}

    - name: api-azure-deploy
      uses: azure/webapps-deploy@v2
      with: 
        app-name: 'api-${{ inputs.uniquelabel }}'
        package: '${{ inputs.apidotnetoutputpath }}'

# Blazor Wasm code
    - name: blazorwasm-dotnet-build-publish
      run: |
        dotnet restore ${{ inputs.blazorwasmcsprojpath }}
        dotnet build ${{ inputs.blazorwasmcsprojpath }} --configuration Release
        dotnet publish ${{ inputs.blazorwasmcsprojpath }} -c Release -o ${{ inputs.blazorwasmdotnetoutputpath }}

    - name: blazorwasm-azure-deploy
      uses: azure/webapps-deploy@v2
      with: 
        app-name: 'blazorwasm-${{ inputs.uniquelabel }}'
        package: '${{ inputs.blazorwasmdotnetoutputpath }}'
