@inject IHostEnvironment Env

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link href="css/site.css" rel="stylesheet" />
    <link href="STO.styles.css" rel="stylesheet" />
    <script src="https://kit.fontawesome.com/2c9a3ced41.js" crossorigin="anonymous"></script>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <HeadOutlet @rendermode="InteractiveServer" />
</head>
<body>
    <Routes @rendermode="InteractiveServer" />

    <div id="blazor-error-ui">
        @if (Env.IsDevelopment())
        {
            <text>
                An unhandled exception has occurred. See browser dev tools for details.
            </text>
        }
        else
        {
            <text>
                An error has occurred. This app may no longer respond until reloaded.
            </text>
        }
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    
    <script src="/_framework/blazor.web.js"></script>
@*     <script>
        Blazor.start({
            configureSignalR: function (builder) {
                let c = builder.build();
                c.serverTimeoutInMilliseconds = 300000;
                c.keepAliveIntervalInMilliseconds = 15000;
                builder.build = () => {
                    return c;
                };
            }
        });

        var lockResolver;
        if (navigator && navigator.locks && navigator.locks.request) {
            const promise = new Promise((res) => {
                lockResolver = res;
            });

            navigator.locks.request('unique_lock_name', { mode: "shared" }, () => {
                return promise;
            });
        }
    </script> *@
</body>
</html>
