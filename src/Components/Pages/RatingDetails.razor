@page "/ratings/{RatingRowKey}"
@inject IRatingService RatingService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

 <h1><i class="fa-regular fa-star me-2"></i> @pageTitle</h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        <p>Ratings cannot be edited, only deleted</p>

        <h5>Date</h5>
        <p>@rating.RatingEntity.Timestamp.Value.ToString("dd MMM yyyy HH:mm")</p>

        <h5>Player</h5>
        <p><a href="players/@rating.Player.PlayerEntity.RowKey/player">@rating.Player.PlayerEntity.Name</a></p>

        <h5>Game</h5>
        <p><GameTitle GameRowKey="@rating.Game.GameEntity.RowKey" Link="true" /></p>

        <h5>Rating</h5>
        <p>@rating.RatingEntity.Rating</p>

        <h5>Notes</h5>
        @if (rating.RatingEntity.Notes is not null)
        {
            <p>@rating.RatingEntity.Notes</p>
        }
        else
        {
            <p>No Notes</p>
        }

        <div class="modal-footer">
            <DeleteButtonWithCheck EntityRowKey="@rating.RatingEntity.RowKey" EntityLabel="@pageTitle" EntityType="@typeof(RatingEntity).ToString()" NavigateToUrl="/ratings" ButtonLabel="Delete" />
        </div>
    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string RatingRowKey { get; set; }

    private Rating rating;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        rating = await RatingService.GetRating(RatingRowKey);
        pageTitle = $"{@rating.Player.PlayerEntity.Name}, {@rating.Game.GameEntity.Date.Date.ToString("dd MMM")}";
    }
}