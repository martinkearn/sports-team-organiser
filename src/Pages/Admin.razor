@page "/admin"
@inject IStorageService StorageService
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>TNF - Admin</PageTitle>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Tags</th>
            <th scope="col">Rate</th>
            <th scope="col">Game Forecast</th>
            <th scope="col">Played</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in players)
        {
            <tr>
                <th><InputText class="form-control" @bind-Value="player.Name"></InputText></th>
                <td><InputText class="form-control" @bind-Value="player.Tags"></InputText></td>
                <td><div class="input-group"><span class="input-group-text">£</span><InputNumber min="0" class="form-control" @bind-Value="player.DefaultRate"></InputNumber></div></td>
                <td>
                    <InputSelect class="form-control" @bind-Value="player.NextGameForecast">
                        <option value="Unstated">@NextGameForecast.Unstated.ToString()</option>
                        <option value="Yes">@NextGameForecast.Yes.ToString()</option>
                        <option value="No">@NextGameForecast.No.ToString()</option>
                        <option value="Unsure">@NextGameForecast.Unsure.ToString()</option>
                    </InputSelect>
                </td>
                <td>
                    <div class="form-check form-switch">
                        <InputCheckbox class="form-check-input" role="switch" @bind-Value="player.Played" />
                    </div>
                </td>
                <td><button type="button" class="btn btn-outline-secondary" @onclick="@(e => DeletePlayer(player.RowKey))"><i class="fa-solid fa-trash"></i> Delete</button></td>
            </tr>
        }
    </tbody>
</table>

<div>
    <button class="btn btn-primary me-3 mb-3" @onclick="SaveEdits"><i class="fa-solid fa-floppy-disk"></i> Save Changes</button>
    <button class="btn btn-secondary me-3 mb-3" data-bs-toggle="modal" data-bs-target="#addPlayerModal"><i class="fa-solid fa-plus"></i> Add Player</button>
    <button class="btn btn-secondary me-3 mb-3" @onclick="ResetNextGame" ><i class="fa-solid fa-rotate-left"></i> Reset Next Game</button>
</div>

<!-- Add Modal -->
<div class="modal fade" id="addPlayerModal" tabindex="-1" aria-labelledby="addPlayerModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="addPlayerModalLabel">Add Shortcut</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <EditForm Model="@newPlayer" OnSubmit="@AddPlayer">
            <div class="mb-3">
                <label for="addName" class="form-label">Name</label>
                <InputText class="form-control" id="addName" @bind-Value="newPlayer.Name" />
            </div>

            <div class="mb-3">
                <label for="addTags" class="form-label">Tags</label>
                <InputText id="addTags" class="form-control" @bind-Value="newPlayer.Tags" />
                <div id="addTagsHelp" class="form-text">For example "defender,dribbling,goalie".</div>
            </div>

            <div class="mb-3">
                <label for="addDefaultRate" class="form-label">Default Rate</label>
                <div class="input-group">
                    <span class="input-group-text">£</span>
                    <InputNumber type="number" min="0" class="form-control" id="addDefaultRate" @bind-Value="newPlayer.DefaultRate" />
                </div>
                <div id="emailHelp" class="form-text">Default rate per game. Usually £3 or £4.</div>
            </div>
            
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Add Player</button>
            </div>
        </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
    private List<Player> players = new List<Player>();

    private Player newPlayer = new();

    protected override void OnInitialized()
    {
        RefreshData();
    }

    async Task AddPlayer()
    {
        await StorageService.UpsertEntity<Player>(Constants.PlayerPartitionKey, newPlayer);
        RefreshData();
    }

    async Task UpdatePlayer(Player updatedPlayer)
    {
        await StorageService.UpsertEntity<Player>(Constants.PlayerPartitionKey, updatedPlayer);
        RefreshData();
    }

    async Task SaveEdits()
    {
        foreach (var player in players)
        {
            await StorageService.UpsertEntity<Player>(Constants.PlayerPartitionKey, player);
        }
        RefreshData();
    }

    async Task ResetNextGame()
    {
        foreach (var player in players)
        {
            player.NextGameForecast = NextGameForecast.Unstated;
            player.Played = false;
            await StorageService.UpsertEntity<Player>(Constants.PlayerPartitionKey, player);
        }
        RefreshData();
    }

    async Task DeletePlayer(string rowKey)
    {
        await StorageService.DeleteEntity(Constants.PlayerPartitionKey, rowKey);
        RefreshData();
    }

    private void RefreshData()
    {
        newPlayer = new Player();
        players = StorageService.QueryEntities<Player>(Constants.PlayerPartitionKey, default);
    }
}