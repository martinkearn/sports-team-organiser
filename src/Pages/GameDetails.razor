@page "/games/{GameRowKey}"
@inject IStorageService StorageService

<PageTitle>TNF - Game @game?.Date</PageTitle>

<h1>@game?.Date.Date.ToLongDateString()</h1>
<p>Forecast: @playersAtGame.Where(p => p.Forecast == "yes").Count() yes / @playersAtGame.Where(p => p.Forecast == "maybe").Count() maybe <br> Actual: @playersAtGame.Where(p => p.Played == true).Count()</p>

@if (currentTab == "players")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" class="d-none d-lg-table-cell">Tags</th>
                <th scope="col">Playing</th>
                <th scope="col">Played</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                var thisPag = playersAtGame.Single(p => p.PlayerRowKey == player.RowKey);
                <tr>
                    <td>@player.Name</td>
                    <td class="d-none d-lg-table-cell">@player.Tags</td>
                    <td>
                        <InputSelect class="form-select" @bind-Value=thisPag.Forecast @bind-Value:after="(e => EditPlayerAtGame(thisPag))">
                            @foreach (var option in PlayingOptions)
                            {
                                <option value="@option">@textInfo.ToTitleCase(option)</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=thisPag.Played @bind-Value:after="(e => EditPlayerAtGame(thisPag))"></InputCheckbox>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <p>Show list of transactions related to this game here with player and amount</p>
}

@if (currentTab == "teams")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <p>Players that are marked as "Played" for this game.</p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" >Tags</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pag in playersAtGame.Where(pag => pag.Played == true))
            {
                var thisPlayer = players.Single(p => p.RowKey == pag.PlayerRowKey);
                <tr>
                    <td>@thisPlayer.Name</td>
                    <td>@thisPlayer.Tags</td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
</div>

@code {
    [Parameter]
    public string? GameRowKey { get; set; }

    private Game game = new();

    private List<Player> players = new();

    private List<PlayerAtGame> playersAtGame = new();

    List<String> PlayingOptions = new List<string> { "unstated", "maybe", "yes", "no" };

    TextInfo textInfo = new CultureInfo("en-GB", false).TextInfo;

    private string? currentTab = "players";

    protected override void OnInitialized()
    {
        RefreshData();
    }

    async Task EditPlayerAtGame(PlayerAtGame editedPlayerAtGame)
    {
        await StorageService.UpsertEntity<PlayerAtGame>(editedPlayerAtGame);
        
        // Add / remove transactions
        var player = players.Single(p => p.RowKey == editedPlayerAtGame.PlayerRowKey);
        if (editedPlayerAtGame.Played)
        {
            var transaction = new Transaction()
            {
                PlayerRowKey = editedPlayerAtGame.PlayerRowKey,
                Amount = player.DefaultRate,
                Date = DateTimeOffset.UtcNow,
                GameRowKey = editedPlayerAtGame.GameRowKey,
                Notes = "Auto added"
            };
            await StorageService.UpsertEntity<Transaction>(transaction);
        }
        else
        {
            var existingTransactions = StorageService.QueryEntities<Transaction>($"PlayerRowKey eq '{editedPlayerAtGame.PlayerRowKey}' and GameRowKey eq '{editedPlayerAtGame.GameRowKey}'");
            foreach (var existingTransaction in existingTransactions)
            {
                await StorageService.DeleteEntity<Transaction>(existingTransaction.RowKey);
            }
        }

        RefreshData();
    }

    private void RefreshData()
    {
        players = StorageService.QueryEntities<Player>(default)            
            .OrderBy(p => p.Name)
            .ToList();
        game = StorageService.QueryEntities<Game>($"RowKey eq '{GameRowKey}'").First();
        playersAtGame = StorageService.QueryEntities<PlayerAtGame>($"GameRowKey eq '{GameRowKey}'");
        
        // Create PAG entity locally for any player who does not already exist as a PAG
        foreach (var player in players)
        {
            var existingPag = playersAtGame.SingleOrDefault(p => p.PlayerRowKey == player.RowKey && p.GameRowKey == GameRowKey);
            if (existingPag == default)
            {
                var pag = new PlayerAtGame()
                {
                    GameRowKey = game.RowKey,
                    PlayerRowKey = player.RowKey,
                    Forecast = "unstated",
                    Played = false
                };
                playersAtGame.Add(pag);
            }
        }
    }

    private void SwitchTabPlayers() => currentTab = "players";
    private void SwitchTabTransactions() => currentTab = "transactions";
    private void SwitchTabTeams() => currentTab = "teams";
}