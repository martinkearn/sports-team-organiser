@page "/games/{GameRowKey}"
@inject IStorageService StorageService

<PageTitle>TNF - Game @game?.Date</PageTitle>

<h1>@game?.Date.Date.ToLongDateString()</h1>
<p>Forecast: @playersAtGame.Where(p => p.Forecast == PlayingOptions.Yes.ToString()).Count() yes / @playersAtGame.Where(p => p.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe <br> Actual: @playersAtGame.Where(p => p.Played == true).Count()</p>

@if (currentTab == "players")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" class="d-none d-lg-table-cell">Position</th>
                <th scope="col">Playing</th>
                <th scope="col">Played</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                var thisPag = playersAtGame.Single(p => p.PlayerRowKey == player.RowKey);
                <tr>
                    <td>@player.Name</td>
                    <td class="d-none d-lg-table-cell">@player.Position</td>
                    <td>
                        <InputSelect class="form-select" @bind-Value=thisPag.Forecast @bind-Value:after="(e => EditPlayerAtGame(thisPag))">
                            @foreach (string option in Enum.GetNames(typeof(PlayingOptions)))
                            {
                                <option value="@option">@option</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=thisPag.Played @bind-Value:after="(e => EditPlayerAtGame(thisPag))"></InputCheckbox>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <p>Transactions assoicated with this game.</p>

    <table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Amount</th>
            <th scope="col">Player</th>
            <th scope="col" class="d-none d-lg-table-cell">Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transactionForGame in transactionsForGame)
        {
            var amountStyle = (transactionForGame.Amount < 0) ? "red-text" : string.Empty;
            <tr>
                <td>@transactionForGame.Date.Date.ToShortDateString()</td>
                <td><span class="@amountStyle">@transactionForGame.Amount.ToString("C", CultureInfo.CurrentCulture)</span></td>
                <td>@players.Single(p => p.RowKey == transactionForGame.PlayerRowKey).Name</td>
                <td class="d-none d-lg-table-cell">@transactionForGame.Notes</td>
            </tr>
        }
    </tbody>
</table>
}

@if (currentTab == "teams")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <p>Team status as at @DateTime.UtcNow</p>
    
    <h4>Team A - @teamA.Count()</h4>
    @foreach (var pag in teamA)
    {
        var thisPlayer = players.Single(p => p.RowKey == pag.PlayerRowKey);
        <p><b>@thisPlayer.Name</b>, @thisPlayer.Position, @pag.Forecast</p>
    }

    <h4>Team B - @teamB.Count()</h4>
    @foreach (var pag in teamB)
    {
        var thisPlayer = players.Single(p => p.RowKey == pag.PlayerRowKey);
        <p><b>@thisPlayer.Name</b>, @thisPlayer.Position, @pag.Forecast</p>
    }
}

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
</div>

@code {
    [Parameter]
    public string? GameRowKey { get; set; }

    private Game game = new();

    private List<Player> players = new();

    private List<PlayerAtGame> playersAtGame = new();

    private List<PlayerAtGame> teamA = new();

    private List<PlayerAtGame> teamB = new();

    private List<Transaction> transactionsForGame = new();

    private string? currentTab = "players";

    protected override void OnInitialized()
    {
        RefreshData();
    }

    async Task EditPlayerAtGame(PlayerAtGame editedPlayerAtGame)
    {
        await StorageService.UpsertEntity<PlayerAtGame>(editedPlayerAtGame);
        
        // Add / remove transactions
        var player = players.Single(p => p.RowKey == editedPlayerAtGame.PlayerRowKey);
        if (editedPlayerAtGame.Played)
        {
            var transaction = new Transaction()
            {
                PlayerRowKey = editedPlayerAtGame.PlayerRowKey,
                Amount = -player.DefaultRate,
                Date = DateTimeOffset.UtcNow,
                GameRowKey = editedPlayerAtGame.GameRowKey,
                Notes = "Auto debited"
            };
            await StorageService.UpsertEntity<Transaction>(transaction);
        }
        else
        {
            // Get debit transactions (less than Â£0) for player and game
            var existingTransactions = StorageService.QueryEntities<Transaction>($"PlayerRowKey eq '{editedPlayerAtGame.PlayerRowKey}' and GameRowKey eq '{editedPlayerAtGame.GameRowKey}' and Amount lt 0");
            foreach (var existingTransaction in existingTransactions)
            {
                await StorageService.DeleteEntity<Transaction>(existingTransaction.RowKey);
            }
        }

        RefreshData();
    }

    private void RefreshData()
    {
        players = StorageService.QueryEntities<Player>(default)            
            .OrderBy(p => p.Name)
            .ToList();
        game = StorageService.QueryEntities<Game>($"RowKey eq '{GameRowKey}'").First();
        playersAtGame = StorageService.QueryEntities<PlayerAtGame>($"GameRowKey eq '{GameRowKey}'");
        transactionsForGame = StorageService.QueryEntities<Transaction>($"GameRowKey eq '{GameRowKey}'");
        
        // Create PAG entity locally for any player who does not already exist as a PAG
        foreach (var player in players)
        {
            var existingPag = playersAtGame.SingleOrDefault(p => p.PlayerRowKey == player.RowKey && p.GameRowKey == GameRowKey);
            if (existingPag == default)
            {
                var pag = new PlayerAtGame()
                {
                    GameRowKey = game.RowKey,
                    PlayerRowKey = player.RowKey,
                    Forecast = PlayingOptions.Unstated.ToString(),
                    Played = false,
                    Team = string.Empty
                };
                playersAtGame.Add(pag);
            }
        }

        GenerateTeams();
    }

    private void GenerateTeams()
    {
        // Clear teams
        teamA.Clear();
        teamB.Clear();

        // Calculate new teams
        var teams = new List<Team>();
        teams.Add(new Team() { Name = "A", Count = 0});
        teams.Add(new Team() { Name = "B", Count = 0});

        foreach (var position in Enum.GetNames(typeof(PlayerPosition)))
        {
            var playersInPosition = players.Where(p => p.Position.ToString() == position);

            foreach (var playerInPosition in playersInPosition)
            {
                var pag = playersAtGame.Single(p => p.PlayerRowKey == playerInPosition.RowKey);

                if (pag.Forecast == PlayingOptions.Yes.ToString() || pag.Forecast == PlayingOptions.Maybe.ToString()) 
                {
                    var lowestTeam = teams.MinBy(t => t.Count);
                    if (lowestTeam != null)
                    {
                        pag.Team = lowestTeam.Name;
                        if (lowestTeam.Name == "A")
                        {
                            teamA.Add(pag);
                        }
                        else if (lowestTeam.Name == "B")
                        {
                            teamB.Add(pag);
                        }
                        lowestTeam.Count += 1;
                    }
                }
            }
        }
    }

    private void SwitchTabPlayers() => currentTab = "players";
    private void SwitchTabTransactions() => currentTab = "transactions";
    private void SwitchTabTeams() => currentTab = "teams";
}