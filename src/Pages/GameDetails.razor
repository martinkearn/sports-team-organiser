@page "/games/{GameRowKey}"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @pageTitle</h1>

<p>@game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Played == true).Count() actual</p>

@if (currentTab == "game")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabGame">
                <span class="d-md-none"><i class="fa-solid fa-people-group"></i></span>
                <span class="d-none d-md-block">Game</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">
                <span class="d-md-none"><i class="fa-solid fa-user"></i></span>
                <span class="d-none d-md-block">Players</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">
                <span class="d-md-none"><i class="fa-solid fa-coins"></i></span>
                <span class="d-none d-md-block">Transactions</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/teamsheet/@game.GameEntity.RowKey">
                <span class="d-md-none"><i class="fa-solid fa-table"></i></span>
                <span class="d-none d-md-block">Teamsheet</span>
            </a>
        </li>
    </ul>

    <div class="pb-4">
        <EditForm Model="@newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group col-12">
                <InputSelect class="form-select" @bind-Value="newPagEntity.PlayerRowKey">
                    <option value="">Add player to game ...</option>
                    @foreach (var player in players)
                    {
                        if (game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) == default)
                        {
                            <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                        }
                    }
                </InputSelect>
                <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
            </div>
        </EditForm>
        <p>@game.PlayersAtGame.Count() players.</p>
    </div>

    <div class="pb-4">
        <EditForm Model="@newPagTransactionEntity" OnValidSubmit="AddPagTransaction" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="input-group col-12">
                <InputSelect class="form-select" @bind-Value="newPagTransactionEntity.PlayerRowKey" @oninput="NewPagTransactionPlayerChanged">
                    <option value="">Add payment to game ...</option>
                    @foreach (var player in players)
                    {
                        if (game.PlayersAtGame.SingleOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) != default)
                        {
                            <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                        }
                    }
                </InputSelect>
                <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
            </div>
        </EditForm>
        <p>@game.TransactionsEntities.Count transactions totalling <CurrencyDisplay Amount="@game.TransactionsEntities.Sum(o => o.Amount)" />.</p>
    </div>
}

@if (currentTab == "players")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabGame">
                <span class="d-md-none"><i class="fa-solid fa-people-group"></i></span>
                <span class="d-none d-md-block">Game</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayers">
                <span class="d-md-none"><i class="fa-solid fa-user"></i></span>
                <span class="d-none d-md-block">Players</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">
                <span class="d-md-none"><i class="fa-solid fa-coins"></i></span>
                <span class="d-none d-md-block">Transactions</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/teamsheet/@game.GameEntity.RowKey">
                <span class="d-md-none"><i class="fa-solid fa-table"></i></span>
                <span class="d-none d-md-block">Teamsheet</span>
            </a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortPags(Enums.SortPagsBy.Name)">Name</button></th>
                <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortPags(Enums.SortPagsBy.Position)">Pos</button></th>
                <th scope="col" class="d-none d-lg-table-cell"><button class="btn btn-link m-0 p-0" @onclick="() => SortPags(Enums.SortPagsBy.Playing)">Playing</button></th>
                <th scope="col" class="d-none d-lg-table-cell"><button class="btn btn-link m-0 p-0" @onclick="() => SortPags(Enums.SortPagsBy.Balance)">Game Balance</button></th>
                <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortPags(Enums.SortPagsBy.Played)">Played</button></th>
                <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortPags(Enums.SortPagsBy.Team)">Team</button></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pag in game.PlayersAtGame)
            {
                <tr>
                    <td><a href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a></td>
                    <td><PositionIcon Position="pag.Player.PlayerEntity.Position" /></td>
                    <td class="d-none d-lg-table-cell">
                        <InputSelect class="form-select" @bind-Value=pag.PlayerAtGameEntity.Forecast @bind-Value:after="() => EditPagEntity(pag.PlayerAtGameEntity)" >
                            <option value="Yes">Yes</option>
                            <option value="Maybe">Maybe</option>
                        </InputSelect>
                    </td>
                    <td class="d-none d-lg-table-cell"><CurrencyDisplay Amount="@pag.Player.Transactions.Where(o => o.GameRowKey == game.GameEntity.RowKey).Sum(o => o.Amount)" /></td>
                    <td>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=pag.PlayerAtGameEntity.Played @bind-Value:after="() => BillRefundPagEntity(pag.PlayerAtGameEntity)"></InputCheckbox>
                        </div>
                    </td>
                    <td><button class="btn btn-outline-secondary btn-sm" @onclick="() => SwitchPagTeam(pag.PlayerAtGameEntity)">@pag.PlayerAtGameEntity.Team <i class="fa-solid fa-repeat"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabGame">
                <span class="d-md-none"><i class="fa-solid fa-people-group"></i></span>
                <span class="d-none d-md-block">Game</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">
                <span class="d-md-none"><i class="fa-solid fa-user"></i></span>
                <span class="d-none d-md-block">Players</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">
                <span class="d-md-none"><i class="fa-solid fa-coins"></i></span>
                <span class="d-none d-md-block">Transactions</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/teamsheet/@game.GameEntity.RowKey">
                <span class="d-md-none"><i class="fa-solid fa-table"></i></span>
                <span class="d-none d-md-block">Teamsheet</span>
            </a>
        </li>
    </ul>

    <h4>Players transactions in game</h4>
    <p>Players that do not have enough funds on account to cover this game:</p>
    <ul>
    @foreach (var pagLowFunds in game.PlayersAtGame.Where(o => o.Player.Balance < o.Player.PlayerEntity.DefaultRate))
    {
        <li><a href="/players/@pagLowFunds.Player.PlayerEntity.RowKey/player">@pagLowFunds.Player.PlayerEntity.Name</a>, balance on account: <CurrencyDisplay Amount="@pagLowFunds.Player.Transactions.Sum(o => o.Amount)" /></li>
    }
    </ul>

    <p>Players with no transactions for this game:</p>
    <ul>
    @foreach (var pag in game.PlayersAtGame)
    {
        var pagTrasnactions = game.TransactionsEntities.Where(o => o.PlayerRowKey == pag.Player.PlayerEntity.RowKey).Count();
        if (pagTrasnactions == 0)
        {
            <li><a href="/players/@pag.Player.PlayerEntity.RowKey/player">@pag.Player.PlayerEntity.Name</a></li>
        } 
    }
    </ul>

    <h4>Transactions in game</h4>
    <p>@game.TransactionsEntities.Count transactions totalling <CurrencyDisplay Amount="@game.TransactionsEntities.Sum(o => o.Amount)" />.</p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Date/Time</th>
                <th scope="col">Amount</th>
                <th scope="col">Player</th>
                <th scope="col" class="d-none d-lg-table-cell">Player at Game</th>
                <th scope="col" class="d-none d-lg-table-cell">Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionEntityForGame in game.TransactionsEntities)
            {
                <tr>
                    <td><a href="/transactions/@transactionEntityForGame.RowKey">@transactionEntityForGame.Date.ToString("dd MMM yyyy HH:mm")</a></td>
                    <td><CurrencyDisplay Amount="@transactionEntityForGame.Amount" /></td>
                    <td><a href="/players/@transactionEntityForGame.PlayerRowKey/player">@players.SingleOrDefault(o => o.PlayerEntity.RowKey == transactionEntityForGame.PlayerRowKey).PlayerEntity.Name</a></td>
                    @{var pagForTransaction = game.PlayersAtGame.SingleOrDefault(o => o.Player.PlayerEntity.RowKey == transactionEntityForGame.PlayerRowKey);}
                    @if (pagForTransaction != default)
                    {
                        <td class="d-none d-lg-table-cell"><a href="/pags/@pagForTransaction.PlayerAtGameEntity.RowKey">@pagForTransaction.Player.PlayerEntity.Name</a></td>
                    }
                    else
                    {
                        <td class="d-none d-lg-table-cell">No player at game</td>
                    }
                    <td class="d-none d-lg-table-cell">@transactionEntityForGame.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="modal-footer px-0">
    <button class="btn btn-secondary" @onclick="CalculateTeams"><i class="fa-solid fa-gear"></i> Calculate Teams</button> 
    <DeleteButtonWithCheck EntityRowKey="@game.GameEntity.RowKey" EntityLabel="@pageTitle" EntityType="@typeof(GameEntity).ToString()" NavigateToUrl="/games" />
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private string currentTab = "game";

    private PlayerAtGameEntity newPagEntity;

    private TransactionEntity newPagTransactionEntity;

    private List<PlayerAtGame> pagsNoTeam;

    private string pageTitle;

    private Enums.SortPagsBy currentPagSortBy;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntity(newPagEntity);
        await RefreshData();
    }

    private async Task AddPagTransaction()
    {
        await TransactionService.UpsertTransactionEntity(newPagTransactionEntity);
        await RefreshData();
    }

    private void NewPagTransactionPlayerChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var player = PlayerService.GetPlayer(e.Value.ToString());
            newPagTransactionEntity.Amount = player.PlayerEntity.DefaultRate;
        }
    }

    private async Task EditPagEntity(PlayerAtGameEntity pag)
    {
        await GameService.UpsertPlayerAtGameEntity(pag);
        await RefreshData();
    }

    async Task BillRefundPagEntity(PlayerAtGameEntity pag)
    {
        // Get player for pag
        var player = PlayerService.GetPlayer(pag.PlayerRowKey);

        // Add / remove transactions if played / not played
        if (pag.Played)
        {
            var transaction = new TransactionEntity()
            {
                PlayerRowKey = pag.PlayerRowKey,
                Amount = -player.PlayerEntity.DefaultRate,
                Date = DateTimeOffset.UtcNow,
                GameRowKey = pag.GameRowKey,
                Notes = $"Debited for game {game.GameEntity.Date.Date.ToString("dd MMM yyyy")}"
            };
            await TransactionService.UpsertTransactionEntity(transaction);
        }
        else
        {
            // Get debit transactions (less than £0) for player and game
            var pagDebitTransactionEntities = player.Transactions
                .Where(o => o.GameRowKey == pag.GameRowKey)
                .Where(o => o.Amount < 0);
            foreach (var pagDebitTransactionEntity in pagDebitTransactionEntities)
            {
                await TransactionService.DeleteTransactionEntity(pagDebitTransactionEntity.RowKey);
            }
        }

        // Upsert pag
        await GameService.UpsertPlayerAtGameEntity(pag);

        await RefreshData();
    }

    async Task CalculateTeams()
    {
        var playersAtGameWithTeams = await GameService.CalculateTeams(game.PlayersAtGame);
        game.TeamA = playersAtGameWithTeams
            .Where(pag => pag.PlayerAtGameEntity.Team == "A")
            .OrderBy(o => o.Player.PlayerEntity.Name)
            .ToList();
        game.TeamB = playersAtGameWithTeams
            .Where(pag => pag.PlayerAtGameEntity.Team == "B")
            .OrderBy(o => o.Player.PlayerEntity.Name)
            .ToList();

        await RefreshData();
    }

    async Task SwitchPagTeam(PlayerAtGameEntity pag)
    {
        if (pag.Team == "A")
        {
            pag.Team = "B";
        }
        else if (pag.Team == "B")
        {
            pag.Team = "";
        }
        else
        {
            pag.Team = "A";
        }
        await GameService.UpsertPlayerAtGameEntity(pag);
        await RefreshData();
    }

    private void SortPags(Enums.SortPagsBy by)
    {
        switch(by)
        {
            case Enums.SortPagsBy.Name:
                game.PlayersAtGame = (currentPagSortBy == by) ? 
                    game.PlayersAtGame.OrderByDescending(o => o.Player.PlayerEntity.Name).ToList() :
                    game.PlayersAtGame.OrderBy(o => o.Player.PlayerEntity.Name).ToList();
                break;
            case Enums.SortPagsBy.Position:
                game.PlayersAtGame = game.PlayersAtGame.OrderBy(o => o.Player.PlayerEntity.Position).ToList();
                break;
            case Enums.SortPagsBy.Playing:
                game.PlayersAtGame = game.PlayersAtGame.OrderByDescending(o => o.PlayerAtGameEntity.Forecast).ToList();
                break;
            case Enums.SortPagsBy.Balance:
                game.PlayersAtGame = game.PlayersAtGame.OrderByDescending(o => o.Player.Balance).ToList();
                break;
            case Enums.SortPagsBy.Team:
                game.PlayersAtGame = game.PlayersAtGame.OrderBy(o => o.PlayerAtGameEntity.Team).ToList();
                break;
            case Enums.SortPagsBy.Played:
                game.PlayersAtGame = game.PlayersAtGame.OrderByDescending(o => o.PlayerAtGameEntity.Played).ToList();
                break;
            default:
                game.PlayersAtGame = game.PlayersAtGame.OrderBy(o => o.Player.PlayerEntity.Name).ToList();
                break;
        }

        currentPagSortBy = by;
    } 

    async Task RefreshData()
    {
        players = PlayerService.GetPlayers();
        game = await GameService.GetGame(GameRowKey);
        newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
        newPagTransactionEntity = new TransactionEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Date = DateTimeOffset.UtcNow,
            Notes = $"Credited for game {game.GameEntity.Date.Date.ToString("dd MMM yyyy")}"
        };
        pagsNoTeam = game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)).ToList();
        pageTitle = $"{game.GameEntity.Date.Date.ToString("dd MMM")}";

    }

    private void SwitchTabPlayers() => currentTab = "players";
    private void SwitchTabTransactions() => currentTab = "transactions";
    private void SwitchTabGame() => currentTab = "game";
}