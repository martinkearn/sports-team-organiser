@page "/games/{GameRowKey}"
@inject IStorageService StorageService
@inject IPlayerService PlayerService
@inject IGameService GameService

<PageTitle>TNF - Game @game.GameEntity.Date</PageTitle>

<h1>@game.GameEntity.Date.Date.ToLongDateString()</h1>
<p>Forecast: @game.PlayersAtGame.Where(p => p.Forecast == PlayingOptions.Yes.ToString()).Count() yes / @game.PlayersAtGame.Where(p => p.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe <br> Actual: @game.PlayersAtGame.Where(p => p.Played == true).Count()</p>

@if (currentTab == "players")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" class="d-none d-lg-table-cell">Position</th>
                <th scope="col" class="d-none d-lg-table-cell">Balance for game</th>
                <th scope="col">Playing</th>
                <th scope="col">Played</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pag in game.PlayersAtGame)
            {
                var thisPlayer = players.Single(p => p.PlayerEntity.RowKey == pag.PlayerRowKey);
                <tr>
                    <td>@thisPlayer.PlayerEntity.Name</td>
                    <td class="d-none d-lg-table-cell">@thisPlayer.PlayerEntity.Position</td>
                    <td class="d-none d-lg-table-cell"></td>
                    <td>
                        <InputSelect class="form-select" @bind-Value=pag.Forecast @bind-Value:after="() => EditPlayerAtGame(pag)">
                            @foreach (string option in Enum.GetNames(typeof(PlayingOptions)))
                            {
                                <option value="@option">@option</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=pag.Played @bind-Value:after="() => EditPlayerAtGame(pag)"></InputCheckbox>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
    </ul>

    <h4>Transactions associated with this game.</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Amount</th>
                <th scope="col">Player</th>
                <th scope="col" class="d-none d-lg-table-cell">Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionForGame in game.Transactions)
            {
                <tr>
                    <td>@transactionForGame.Date.Date.ToShortDateString()</td>
                    <td><CurrencyDisplay Amount="@transactionForGame.Amount" /></td>
                    <td>@players.Single(p => p.PlayerEntity.RowKey == transactionForGame.PlayerRowKey).PlayerEntity.Name</td>
                    <td class="d-none d-lg-table-cell">@transactionForGame.Notes</td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <a class="btn btn-secondary me-3 mb-3" href="/transactions/"><i class="fa-solid fa-arrow-left"></i> All Transactions</a>
    </div>
}

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private string currentTab = "players";

    protected override void OnInitialized()
    {
        RefreshData();
    }

    async Task EditPlayerAtGame(PlayerAtGameEntity editedPlayerAtGame)
    {
        await StorageService.UpsertEntity<PlayerAtGameEntity>(editedPlayerAtGame);
        
        // Add / remove transactions
        var player = players.Single(p => p.PlayerEntity.RowKey == editedPlayerAtGame.PlayerRowKey);
        if (editedPlayerAtGame.Played)
        {
            var transaction = new TransactionEntity()
            {
                PlayerRowKey = editedPlayerAtGame.PlayerRowKey,
                Amount = -player.PlayerEntity.DefaultRate,
                Date = DateTimeOffset.UtcNow,
                GameRowKey = editedPlayerAtGame.GameRowKey,
                Notes = "Auto debited"
            };
            await StorageService.UpsertEntity<TransactionEntity>(transaction);
        }
        else
        {
            // Get debit transactions (less than Â£0) for player and game
            var existingTransactions = StorageService.QueryEntities<TransactionEntity>($"PlayerRowKey eq '{editedPlayerAtGame.PlayerRowKey}' and GameRowKey eq '{editedPlayerAtGame.GameRowKey}' and Amount lt 0");
            foreach (var existingTransaction in existingTransactions)
            {
                await StorageService.DeleteEntity<TransactionEntity>(existingTransaction.RowKey);
            }
        }

        RefreshData();
    }

    private void RefreshData()
    {
        players = PlayerService.GetPlayers();
        game = GameService.GetGames()
            .Where(g => g.GameEntity.RowKey == GameRowKey)
            .FirstOrDefault();
    }

    private void SwitchTabPlayers() => currentTab = "players";
    private void SwitchTabTransactions() => currentTab = "transactions";
}