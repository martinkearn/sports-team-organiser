@page "/games/{GameRowKey}"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @pageTitle</h1>

<p>@game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe.</p>
<p>@game.GameEntity.Notes</p>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        <div class="row">
            <div class="col">
                <EditForm Model="@newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center" Context="NewPagEntity">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group col-12">
                        <InputSelect class="form-select" @bind-Value="newPagEntity.PlayerRowKey">
                            <option value="">Add player to game ...</option>
                            @foreach (var player in players)
                            {
                                if (game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) == default)
                                {
                                    <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                                }
                            }
                        </InputSelect>
                        <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
                    </div>
                </EditForm>
            </div>
        </div>
        <br>
    </Authorized>
</AuthorizeView>

<table class="table table-sm table-borderless">
    <thead>
        <tr>
            <th scope="col">Team</th>
            <th scope="col">Player</th>
            <AuthorizeView Policy="IsAdminEmail">
                <Authorized>
                                            @if (!simpleView)
                            {
                    <th scope="col" class="text-end">Edit</th>
                    }
                </Authorized>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>
        @foreach (var pag in game.TeamA)
        {
            <tr>
                <td>A</td>
                <td>
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            <a class="d-none d-lg-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a> <span class="d-inline d-lg-none">@pag.Player.PlayerEntity.Name</span> 
                        </Authorized>
                        <NotAuthorized>
                            <span>@pag.Player.PlayerEntity.Name</span>
                        </NotAuthorized>
                    </AuthorizeView>
                    <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /> <RagIcon Pag="@pag" />
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            @if (!simpleView)
                            {
                                <RatingNumberIcon Rating=@pag.Player.PlayerEntity.AdminRating />
                            }
                        </Authorized>
                    </AuthorizeView>
                </td>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        <td class="text-end">
                            @if (!simpleView)
                            {
                                <PagRowEditButtons pag="@pag" RefreshMainPage="RefreshGameData" />
                            }
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
        @if (game.TeamA.Count > 0)
        {
            <tr>
                <td colspan="3">
                    <TeamPlayers Pags="game.TeamA" TeamName="Team A" />
                    <hr>
                </td>
            </tr>
        }
        @foreach (var pag in game.TeamB)
        {
            <tr>
                <td>B</td>
                <td>
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            <a class="d-none d-lg-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a> <span class="d-inline d-lg-none">@pag.Player.PlayerEntity.Name</span> 
                        </Authorized>
                        <NotAuthorized>
                            <span>@pag.Player.PlayerEntity.Name</span>
                        </NotAuthorized>
                    </AuthorizeView>
                    <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /> <RagIcon Pag="@pag" />
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                                                    @if (!simpleView)
                            {
                            <RatingNumberIcon Rating=@pag.Player.PlayerEntity.AdminRating />
                            }
                        </Authorized>
                    </AuthorizeView>
                </td>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        <td class="text-end">
                            @if (!simpleView)
                            {
                                <PagRowEditButtons pag="@pag" RefreshMainPage="RefreshGameData" />
                            }
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
        @if (game.TeamB.Count > 0)
        {
            <tr>
                <td colspan="3">
                    <TeamPlayers Pags="game.TeamB" TeamName="Team B" />
                    <hr>
                </td>
            </tr>
        }
        @foreach (var pag in game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)))
        {
            <tr>
                <td>None</td>
                <td>
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            <a class="d-none d-lg-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a> <span class="d-inline d-lg-none">@pag.Player.PlayerEntity.Name</span> 
                        </Authorized>
                        <NotAuthorized>
                            <span>@pag.Player.PlayerEntity.Name</span>
                        </NotAuthorized>
                    </AuthorizeView>
                    <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /> <RagIcon Pag="@pag" />
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            @if (!simpleView)
                            {
                                <RatingNumberIcon Rating=@pag.Player.PlayerEntity.AdminRating />
                            }
                        </Authorized>
                    </AuthorizeView>
                </td>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        <td class="text-end">
                            @if (!simpleView)
                            {
                                <PagRowEditButtons pag="@pag" RefreshMainPage="RefreshGameData" />
                            }
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
    </tbody>
</table>

<div class="modal-footer px-0">
    <a class="btn btn-secondary" href="/games/"><i class="fa-solid fa-arrow-left"></i>All Games</a>
    <AuthorizeView Policy="IsAdminEmail">
        <Authorized>
            <button class="btn btn-secondary" @onclick="ToggleSimpleView"><i class=@simpleViewCss></i> @simpleViewLabel</button> 
            <button class="btn btn-secondary" @onclick="ToggleAllPlayed"><i class="fa-solid fa-clipboard-list"></i> @markAllPlayedLabel</button> 
            <button class="btn btn-secondary" @onclick="CalculateTeams"><i class="fa-solid fa-gear"></i> Calculate Teams</button> 
        </Authorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private PlayerAtGameEntity newPagEntity;

    private string pageTitle;

    private string markAllPlayedLabel;

    private string simpleViewLabel;

    private bool simpleView = false;

    private string simpleViewCss = "fa-solid fa-eye-slash";

    protected override async Task OnInitializedAsync()
    {
        await RefreshGameData();
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntity(newPagEntity);
        await RefreshGameData();
    }

    async Task CalculateTeams()
    {
        var playersAtGameWithTeams = await GameService.CalculateTeams(game.PlayersAtGame);
        game.TeamA = playersAtGameWithTeams
            .Where(pag => pag.PlayerAtGameEntity.Team == "A")
            .ToList();
        game.TeamB = playersAtGameWithTeams
            .Where(pag => pag.PlayerAtGameEntity.Team == "B")
            .ToList();

        await RefreshGameData();
    }

    async Task ToggleAllPlayed()
    {
        var played = MarkAsPLayedOrNotPLayed();
        await GameService.MarkAllPlayed(game.GameEntity.RowKey, played);
        await RefreshGameData();
    }

    void ToggleSimpleView()
    {
        simpleView = !simpleView;
        SetSimpleViewLabel();
    }

    private bool MarkAsPLayedOrNotPLayed()
    {
        int playedPagsCount = game.PlayersAtGame.Where(o => o.PlayerAtGameEntity.Played).Count();
        bool played = (playedPagsCount == 0) ? true : false;
        return played;
    } 

    private void SetSimpleViewLabel()
    {
        // Set simple view label
        if (simpleView)
        {
            simpleViewLabel = "Disable Simple View";
            simpleViewCss = "fa-solid fa-eye";
        }
        else
        {
            simpleViewLabel = "Enable Simple View";
            simpleViewCss = "fa-solid fa-eye-slash";
        }
    }

    async Task RefreshGameData()
    {
        players = PlayerService.GetPlayers();
        game = await GameService.GetGame(GameRowKey);
        newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
        var gameDateLabel = game.GameEntity.Date.ToString("dd MMM");
        pageTitle = string.IsNullOrEmpty(game.GameEntity.Title) ? gameDateLabel : $"{gameDateLabel} {game.GameEntity.Title}";
        simpleView = false;
        
        // Set played button label
        var played = MarkAsPLayedOrNotPLayed();
        markAllPlayedLabel = (played) ? "Mark all as played": "Mark all as not played";

        //Set simple view label
        SetSimpleViewLabel();
        
        this.StateHasChanged();
    }
}