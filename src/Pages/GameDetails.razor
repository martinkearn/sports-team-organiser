@page "/games/{GameRowKey}"
@inject IStorageService StorageService
@inject IPlayerService PlayerService
@inject IGameService GameService

<PageTitle>TNF - Game @game.GameEntity.Date</PageTitle>

<h1>@game.GameEntity.Date.Date.ToLongDateString()</h1>
<p>Forecast: @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes / @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe <br> Actual: @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Played == true).Count()</p>

@if (currentTab == "players")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
                <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <h4>Add Player at Game</h4>
    <div class="pb-4">
        <EditForm Model="@newPag" OnValidSubmit="AddPag" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-12">
                <InputSelect class="form-select" @bind-Value="newPag.PlayerRowKey">
                    <option value="">Select player ...</option>
                    @foreach (var player in players)
                    {
                        if (game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) == default)
                        {
                            <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-secondary">Add Player to Game</button>
            </div>
        </EditForm>
    </div>

    <h4>Players at Game</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" class="d-none d-lg-table-cell">Position</th>
                <th scope="col">Playing</th>
                <th scope="col">Played</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pag in game.PlayersAtGame)
            {
                <tr>
                    <td>@pag.Player.PlayerEntity.Name</td>
                    <td class="d-none d-lg-table-cell">@pag.Player.PlayerEntity.Position</td>
                    <td>
                        <InputSelect class="form-select" @bind-Value=pag.PlayerAtGameEntity.Forecast @bind-Value:after="() => EditPlayerAtGame(pag.PlayerAtGameEntity)" >
                            <option value="Yes">Yes</option>
                            <option value="Maybe">Maybe</option>
                        </InputSelect>
                    </td>
                    <td>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=pag.PlayerAtGameEntity.Played @bind-Value:after="() => EditPlayerAtGame(pag.PlayerAtGameEntity)"></InputCheckbox>
                        </div>
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => DeletePag(pag.PlayerAtGameEntity)"><i class="fa-solid fa-trash"></i> Remove from game</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <h4>Add Transaction</h4>
    <div class="pb-4">
        <EditForm Model="@newPagTransaction" OnValidSubmit="AddPagTransaction" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-12">
                <InputSelect class="form-select" @bind-Value="newPagTransaction.PlayerRowKey" @oninput="NewPagTransactionPlayerChanged">
                    <option value="">Select player ...</option>
                    @foreach (var player in players)
                    {
                        if (game.PlayersAtGame.SingleOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) != default)
                        {
                            <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="col-12">
                <CurrencyDisplay Amount="newPagTransaction.Amount" ></CurrencyDisplay>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-secondary">Add Transaction for Game</button>
            </div>
        </EditForm>
    </div>

    <h4>Transactions for Game</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Amount</th>
                <th scope="col">Player</th>
                <th scope="col" class="d-none d-lg-table-cell">Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionForGame in game.Transactions)
            {
                <tr>
                    <td>@transactionForGame.Date.Date.ToShortDateString()</td>
                    <td><CurrencyDisplay Amount="@transactionForGame.Amount" /></td>
                    <td>@players.Single(p => p.PlayerEntity.RowKey == transactionForGame.PlayerRowKey).PlayerEntity.Name</td>
                    <td class="d-none d-lg-table-cell">@transactionForGame.Notes</td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <a class="btn btn-secondary me-3 mb-3" href="/transactions/"><i class="fa-solid fa-arrow-left"></i> All Transactions</a>
    </div>
}

@if (currentTab == "teams")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <h4>Team A - @game.TeamA.Count()</h4>
    @foreach (var pagWithTeam in game.TeamA)
    {
        <p><b>@pagWithTeam.Player.PlayerEntity.Name</b>: @pagWithTeam.Player.PlayerEntity.Position, @pagWithTeam.PlayerAtGameEntity.Forecast</p>
    }

    <h4>Team B - @game.TeamB.Count()</h4>
    @foreach (var pagWithTeam in game.TeamB)
    {
        <p><b>@pagWithTeam.Player.PlayerEntity.Name</b>: @pagWithTeam.Player.PlayerEntity.Position, @pagWithTeam.PlayerAtGameEntity.Forecast</p>
    }    
}

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private string currentTab = "players";

    private PlayerAtGameEntity newPag;

    private TransactionEntity newPagTransaction;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task AddPag()
    {
        await GameService.UpsertPlayerAtGame(newPag);
        RefreshData();
    }

    private async Task AddPagTransaction()
    {
        await StorageService.UpsertEntity<TransactionEntity>(newPagTransaction);
        RefreshData();
    }

    private void NewPagTransactionPlayerChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var player = PlayerService.GetPlayer(e.Value.ToString());
            newPagTransaction.Amount = player.PlayerEntity.DefaultRate;
        }
    }


    private async Task EditPlayerAtGame(PlayerAtGameEntity pag)
    {
        await GameService.UpsertPlayerAtGame(pag);
        RefreshData();
    }

    private async Task DeletePag(PlayerAtGameEntity pag)
    {
        await GameService.DeletePlayerAtGame(pag);
        RefreshData();
    }

    private void RefreshData()
    {
        players = PlayerService.GetPlayers();
        game = GameService.GetGame(GameRowKey);
        newPag = new PlayerAtGameEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
        newPagTransaction = new TransactionEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Date = DateTimeOffset.UtcNow,
            Notes = $"Added from game {game.GameEntity.Date.Date.ToShortDateString()}"
        };
    }

    private void SwitchTabPlayers() => currentTab = "players";
    private void SwitchTabTransactions() => currentTab = "transactions";
    private void SwitchTabTeams() => currentTab = "teams";
}