@page "/games/{GameRowKey}"
@inject IStorageService StorageService
@using System.Globalization

<PageTitle>TNF - Game @game?.Date</PageTitle>

<h2>@game?.Date.Date.ToLongDateString()</h2>
<p>Forecast: @playersAtGame.Where(p => p.Forecast == "yes").Count() yes / @playersAtGame.Where(p => p.Forecast == "maybe").Count() maybe <br> Actual: @playersAtGame.Where(p => p.Played == true).Count()</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col" class="d-none d-lg-table-cell">Tags</th>
            <th scope="col">Playing</th>
            <th scope="col">Played</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in players)
        {
            var thisPag = playersAtGame.Single(p => p.PlayerRowKey == player.RowKey);
            <tr>
                <td>@player.Name</td>
                <td class="d-none d-lg-table-cell">@player.Tags</td>
                <td>
                    <InputSelect class="form-select" @bind-Value=thisPag.Forecast @bind-Value:after="(e => EditPlayerAtGame(thisPag))">
                        @foreach (var option in PlayingOptions)
                        {
                            <option value="@option">@textInfo.ToTitleCase(option)</option>
                        }
                    </InputSelect>
                    @* <span class="d-lg-none">@thisPag.Forecast</span>d-none d-lg-table-cell *@
                </td>
                <td>
                    <div class="form-check form-switch">
                        <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=thisPag.Played @bind-Value:after="(e => EditPlayerAtGame(thisPag))"></InputCheckbox>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
</div>

@code {
    [Parameter]
    public string? GameRowKey { get; set; }

    private Game game = new();

    private List<Player> players = new();

    private List<PlayerAtGame> playersAtGame = new();

    List<String> PlayingOptions = new List<string> { "unstated", "maybe", "yes", "no" };

    TextInfo textInfo = new CultureInfo("en-GB", false).TextInfo;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    async Task EditPlayerAtGame(PlayerAtGame editedPlayerAtGame)
    {
        await StorageService.UpsertEntity<PlayerAtGame>(Constants.PlayerAtGamePartitionKey, editedPlayerAtGame);
        RefreshData();
    }

    private void RefreshData()
    {
        players = StorageService.QueryEntities<Player>(Constants.PlayerPartitionKey, default)            
            .OrderBy(p => p.Name)
            .ToList();
        game = StorageService.QueryEntities<Game>(Constants.GamePartitionKey, $"RowKey eq '{GameRowKey}'").First();
        playersAtGame = StorageService.QueryEntities<PlayerAtGame>(Constants.PlayerAtGamePartitionKey, $"GameRowKey eq '{GameRowKey}'");
        
        // Create PAG entity locally for any player who does not already exist as a PAG
        foreach (var player in players)
        {
            var existingPag = playersAtGame.SingleOrDefault(p => p.PlayerRowKey == player.RowKey && p.GameRowKey == GameRowKey);
            if (existingPag == default)
            {
                var pag = new PlayerAtGame()
                {
                    GameRowKey = game.RowKey,
                    PlayerRowKey = player.RowKey,
                    Forecast = "unstated",
                    Played = false
                };
                playersAtGame.Add(pag);
            }
        }
    }
}