@page "/games/{GameRowKey}"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1>@pageTitle</h1>

<p>Forecast: @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes / @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe <br> Actual: @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Played == true).Count()</p>

@if (currentTab == "players")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
                <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <h4>Add Player at Game</h4>
    <div class="pb-4">
        <EditForm Model="@newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-12">
                <InputSelect class="form-select" @bind-Value="newPagEntity.PlayerRowKey">
                    <option value="">Select player ...</option>
                    @foreach (var player in players)
                    {
                        if (game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) == default)
                        {
                            <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-secondary"><i class="fa-solid fa-plus"></i> Add Player to Game</button>
            </div>
        </EditForm>
    </div>

    <h4>Players at Game</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" class="d-none d-lg-table-cell">Position</th>
                <th scope="col" class="d-none d-lg-table-cell">Playing</th>
                <th scope="col">Played</th>
                <th scope="col">Player's Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pag in game.PlayersAtGame)
            {
                <tr>
                    <td><a href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a></td>
                    <td class="d-none d-lg-table-cell">@pag.Player.PlayerEntity.Position</td>
                    <td class="d-none d-lg-table-cell">
                        <InputSelect class="form-select" @bind-Value=pag.PlayerAtGameEntity.Forecast @bind-Value:after="() => EditPagEntity(pag.PlayerAtGameEntity)" >
                            <option value="Yes">Yes</option>
                            <option value="Maybe">Maybe</option>
                        </InputSelect>
                    </td>
                    <td>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" role="switch" @bind-Value=pag.PlayerAtGameEntity.Played @bind-Value:after="() => EditPagEntity(pag.PlayerAtGameEntity)"></InputCheckbox>
                        </div>
                    </td>
                    <td><CurrencyDisplay Amount="@pag.Player.Transactions.Sum(o => o.Amount)" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <h4>Add Payment Transaction</h4>
    <p>Add default amount as a payment for selected player for this game.</p>
    <div class="pb-4">
        <EditForm Model="@newPagTransactionEntity" OnValidSubmit="AddPagTransaction" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-12">
                <InputSelect class="form-select" @bind-Value="newPagTransactionEntity.PlayerRowKey" @oninput="NewPagTransactionPlayerChanged">
                    <option value="">Select player ...</option>
                    @foreach (var player in players)
                    {
                        if (game.PlayersAtGame.SingleOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) != default)
                        {
                            <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-secondary"><i class="fa-solid fa-plus"></i> Add Transaction</button>
            </div>
        </EditForm>
    </div>

    <h4>Transactions for Game</h4>
    <p>Balance for the game: <CurrencyDisplay Amount="game.TransactionsEntities.Sum(o => o.Amount)"></CurrencyDisplay> </p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Player</th>
                <th scope="col">Date/Time</th>
                <th scope="col">Amount</th>
                <th scope="col" class="d-none d-lg-table-cell">Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionEntityForGame in game.TransactionsEntities)
            {
                <tr>
                    <td><a href="players/@transactionEntityForGame.PlayerRowKey">@game.PlayersAtGame.SingleOrDefault(o => o.PlayerAtGameEntity.PlayerRowKey == transactionEntityForGame.PlayerRowKey).Player.PlayerEntity.Name</a></td>
                    <td><a href="transaction/@transactionEntityForGame.RowKey">@transactionEntityForGame.Date.ToString("dd-MM-yy HH:mm")</a></td>
                    <td><CurrencyDisplay Amount="@transactionEntityForGame.Amount" /></td>
                    <td class="d-none d-lg-table-cell">@transactionEntityForGame.Notes</td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Players still to pay for Game</h4>
    <p>Players at game with zero balance.</p>
    @foreach (var pag in game.PlayersAtGame.Where(o => o.Player.Balance <= 0))
    {
        <p><a href="/players/@pag.Player.PlayerEntity.RowKey">@pag.Player.PlayerEntity.Name</a>, <CurrencyDisplay Amount="pag.Player.Balance" /></p>
    }

    <div>
        <a class="btn btn-secondary me-3 mb-3" href="/transactions/"><i class="fa-solid fa-arrow-left"></i> All Transactions</a>
    </div>
}

@if (currentTab == "teams")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayers">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTeams">Teams</a>
        </li>
    </ul>

    <h4>Team A - @game.TeamA.Count()</h4>
    @foreach (var pagWithTeam in game.TeamA)
    {
        <p><a href="/players/@pagWithTeam.Player.PlayerEntity.RowKey">@pagWithTeam.Player.PlayerEntity.Name</a>, @pagWithTeam.Player.PlayerEntity.Position, @pagWithTeam.PlayerAtGameEntity.Forecast</p>
    }

    <h4>Team B - @game.TeamB.Count()</h4>
    @foreach (var pagWithTeam in game.TeamB)
    {
        <p><a href="/players/@pagWithTeam.Player.PlayerEntity.RowKey">@pagWithTeam.Player.PlayerEntity.Name</a>, @pagWithTeam.Player.PlayerEntity.Position, @pagWithTeam.PlayerAtGameEntity.Forecast</p>
    }    
}

<div class="modal-footer">
    <a class="btn btn-secondary" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
    <button class="btn btn-secondary" @onclick="DeleteGame"><i class="fa-solid fa-trash"></i> Delete Game</button>
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private string currentTab = "players";

    private PlayerAtGameEntity newPagEntity;

    private TransactionEntity newPagTransactionEntity;

    private string pageTitle;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntity(newPagEntity);
        RefreshData();
    }

    private async Task AddPagTransaction()
    {
        await TransactionService.UpsertTransactionEntity(newPagTransactionEntity);
        RefreshData();
    }

    private void NewPagTransactionPlayerChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var player = PlayerService.GetPlayer(e.Value.ToString());
            newPagTransactionEntity.Amount = player.PlayerEntity.DefaultRate;
        }
    }

    private async Task EditPagEntity(PlayerAtGameEntity pag)
    {
        await GameService.UpsertPlayerAtGameEntity(pag);
        RefreshData();
    }

    async Task DeleteGame()
    {
        await GameService.DeleteGame(game.GameEntity.RowKey);
        Navigation.NavigateTo("/games");
    }

    private void RefreshData()
    {
        players = PlayerService.GetPlayers();
        game = GameService.GetGame(GameRowKey);
        newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
        newPagTransactionEntity = new TransactionEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Date = DateTimeOffset.UtcNow,
            Notes = $"Credited for game {game.GameEntity.Date.Date.ToShortDateString()}"
        };
        pageTitle = $"Game: {game.GameEntity.Date.Date.ToLongDateString()}";
    }

    private void SwitchTabPlayers() => currentTab = "players";
    private void SwitchTabTransactions() => currentTab = "transactions";
    private void SwitchTabTeams() => currentTab = "teams";
}