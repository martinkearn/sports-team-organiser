@page "/games/{GameRowKey}"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @pageTitle</h1>

<p>@game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Played == true).Count() actual</p>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        <div class="row">
            <div class="col">
                <EditForm Model="@newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center" Context="NewPagEntity">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group col-12">
                        <InputSelect class="form-select" @bind-Value="newPagEntity.PlayerRowKey">
                            <option value="">Add player to game ...</option>
                            @foreach (var player in players)
                            {
                                if (game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) == default)
                                {
                                    <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                                }
                            }
                        </InputSelect>
                        <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
                    </div>
                </EditForm>
            </div>
        </div>
        <br>
    </Authorized>
</AuthorizeView>

<h5>Team A - @game.TeamA.Count()</h5>
@if (isSimpleView)
{
    @foreach (var pag in game.TeamA)
    {
        <PagRow pag="@pag" RefreshMainPage="RefreshData" />
    }
}
else
{
    <table class="table table-striped">
        <tbody>
            @foreach (var pag in game.TeamA)
            {
                <tr><td>
                    <PagRow pag="@pag" RefreshMainPage="RefreshData" />
                </td></tr>
            }
        </tbody>
    </table>
}

<h5>Team B - @game.TeamB.Count() (wear bibs)</h5>
@if (isSimpleView)
{
    @foreach (var pag in game.TeamB)
    {
        <PagRow pag="@pag" RefreshMainPage="RefreshData" />
    }
}
else
{
    <table class="table table-striped">
        <tbody>
            @foreach (var pag in game.TeamB)
            {
                <tr><td>
                    <PagRow pag="@pag" RefreshMainPage="RefreshData" />
                </td></tr>
            }
        </tbody>
    </table>
}

<h5>No team assigned</h5>
@if (isSimpleView)
{
    @foreach (var pag in game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)))
    {
        <PagRow pag="@pag" RefreshMainPage="RefreshData" />
    }
}
else
{
    <table class="table table-striped">
        <tbody>
            @foreach (var pag in game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)))
            {
                <tr><td>
                    <PagRow pag="@pag" RefreshMainPage="RefreshData" />
                </td></tr>
            }
        </tbody>
    </table>
}

<table class="table table-striped">
    <tbody>
        @foreach (var pag in game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)))
        {
            <tr><td>
                <PagRow pag="@pag" RefreshMainPage="RefreshData" />
            </td></tr>
        }
    </tbody>
</table>

<div class="modal-footer px-0">
    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="button" @onclick="() => ToggleSimpleView()"><i class="fa-solid fa-sliders"></i> Advanced View</button>
    <a class="btn btn-secondary" href="/games/"><i class="fa-solid fa-arrow-left"></i>All Games</a>
    <AuthorizeView Policy="IsAdminEmail">
        <Authorized>
            <button class="btn btn-secondary" @onclick="MarkAllPLayed"><i class="fa-solid fa-list-check"></i> Mark all as played</button> 
            <button class="btn btn-secondary" @onclick="CalculateTeams"><i class="fa-solid fa-gear"></i> Calculate Teams</button> 
        </Authorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private PlayerAtGameEntity newPagEntity;

    private string pageTitle;

    private bool isSimpleView;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private void ToggleSimpleView()
    {
        isSimpleView = !isSimpleView;
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntity(newPagEntity);
        await RefreshData();
    }

    async Task CalculateTeams()
    {
        var playersAtGameWithTeams = await GameService.CalculateTeams(game.PlayersAtGame);
        game.TeamA = playersAtGameWithTeams
            .Where(pag => pag.PlayerAtGameEntity.Team == "A")
            .ToList();
        game.TeamB = playersAtGameWithTeams
            .Where(pag => pag.PlayerAtGameEntity.Team == "B")
            .ToList();

        await RefreshData();
    }

    async Task MarkAllPLayed()
    {

    }

    async Task RefreshData()
    {
        isSimpleView = true;
        players = PlayerService.GetPlayers();
        game = await GameService.GetGame(GameRowKey);
        newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
        pageTitle = $"{game.GameEntity.Date.ToString("dd MMM yyyy")}";
    }
}