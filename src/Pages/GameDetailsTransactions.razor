@page "/games/{GameRowKey}/transactions"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @pageTitle</h1>

<p>@game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Played == true).Count() actual</p>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" @onclick="SwitchTabNewPlayers">
            <span class="d-md-none"><i class="fa-solid fa-people-group"></i></span>
            <span class="d-none d-md-block">New Players</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" @onclick="SwitchTabPlayers">
            <span class="d-md-none"><i class="fa-solid fa-people-group"></i></span>
            <span class="d-none d-md-block">Players</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" >
            <span class="d-md-none"><i class="fa-solid fa-coins"></i></span>
            <span class="d-none d-md-block">Transactions</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" @onclick="SwitchTabGame">
            <span class="d-md-none"><i class="fa-solid fa-clipboard-list"></i></span>
            <span class="d-none d-md-block">Game</span>
        </a>
    </li>
</ul>

<h4>Player accounts for game</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Pag</th>
            <th scope="col" class="d-none d-lg-table-cell">Player Balance</th>
            <th scope="col">
                @if (DateTime.Now <= game.GameEntity.Date.DateTime)
                {
                    <span>Pre-game Status</span>
                }
                else
                {
                    <span>Post-game Status</span>
                }
            </th>
            <th scope="col">Add Payment</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pag in game.PlayersAtGame)
        {
            // Work out pag RAG status
            var pagRag = "red";
            if (!pag.PlayerAtGameEntity.Played)
            {
                // Not played, so pre-game rag
                if (pag.Player.Balance < 0)
                {
                    pagRag = "red";
                }
                else if ((pag.Player.Balance >= 0) && (pag.Player.Balance < pag.Player.PlayerEntity.DefaultRate))
                {
                    pagRag = "amber";
                }
                else if (pag.Player.Balance >= pag.Player.PlayerEntity.DefaultRate)
                {
                    pagRag = "green";
                }
            }
            else
            {
                // Has played so post game rag
                if (pag.Player.Balance >= 0)
                {
                    pagRag = "green";
                }
                else if ((pag.Player.Balance == 0) && (pag.Player.Balance > 0))
                {
                    pagRag = "amber";
                }
            }

            <tr>
                <td><a href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a></td>
                <td class="d-none d-lg-table-cell"><a href="/players/@pag.Player.PlayerEntity.RowKey/transactions"><CurrencyDisplay Amount="@pag.Player.Balance" /></a> </td>
                <td><RagIcon Pag="@pag" /></td>
                <td><button class="btn btn-outline-secondary btn-sm" @onclick="() => AddTransactionForPlayer(pag.Player.PlayerEntity.RowKey, pag.Player.PlayerEntity.DefaultRate)"><i class="fa-solid fa-plus"></i> Â£@pag.Player.PlayerEntity.DefaultRate</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private List<PlayerAtGame> pagsNoTeam;
    private TransactionEntity newPagTransactionEntity;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task AddPagTransaction()
    {
        await TransactionService.UpsertTransactionEntity(newPagTransactionEntity);
        await RefreshData();
    }

    private async Task AddTransactionForPlayer(string playerRowKey, double amount)
    {
        var newTransactionEntityForPag = new TransactionEntity()
        {
            Date = DateTimeOffset.UtcNow,
            Notes = TransactionService.GetNotesForGame(game.GameEntity.RowKey),
            PlayerRowKey = playerRowKey,
            Amount = amount
        };
        await TransactionService.UpsertTransactionEntity(newTransactionEntityForPag);
        await RefreshData();
    }

    private void NewPagTransactionPlayerChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var player = PlayerService.GetPlayer(e.Value.ToString());
            newPagTransactionEntity.Amount = player.PlayerEntity.DefaultRate;
        }
    }

    async Task RefreshData()
    {
        players = PlayerService.GetPlayers();
        game = await GameService.GetGame(GameRowKey);
        newPagTransactionEntity = new TransactionEntity()
        {
            Date = DateTimeOffset.UtcNow,
            Notes = $"Credited for game {game.GameEntity.Date.Date.ToString("dd MMM yyyy")}"
        };
        pagsNoTeam = game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)).ToList();
        pageTitle = $"{game.GameEntity.Date.ToString("dd MMM yyyy HH:mm")} transactions";

    }
    private void SwitchTabPlayers() => Navigation.NavigateTo($"/games/{@GameRowKey}/players");
    private void SwitchTabGame() => Navigation.NavigateTo($"/games/{@GameRowKey}/game");
    private void SwitchTabNewPlayers() => Navigation.NavigateTo($"/games/{@GameRowKey}/newplayers");
}