@page "/games/{GameRowKey}/transactions"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @pageTitle</h1>

<p>@game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Played == true).Count() actual</p>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" @onclick="SwitchTabGame">
            <span class="d-md-none"><i class="fa-solid fa-people-group"></i></span>
            <span class="d-none d-md-block">Game</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" >
            <span class="d-md-none"><i class="fa-solid fa-coins"></i></span>
            <span class="d-none d-md-block">Transactions</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link"  @onclick="SwitchTabTeamsheet">
            <span class="d-md-none"><i class="fa-solid fa-table"></i></span>
            <span class="d-none d-md-block">Teamsheet</span>
        </a>
    </li>
</ul>

<div class="pb-4">
    <EditForm Model="@newPagTransactionEntity" OnValidSubmit="AddPagTransaction" class="row row-cols-lg-auto g-3 align-items-center">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="input-group col-12">
            <InputSelect class="form-select" @bind-Value="newPagTransactionEntity.PlayerRowKey" @oninput="NewPagTransactionPlayerChanged">
                <option value="">Add payment to game ...</option>
                @foreach (var player in players)
                {
                    if (game.PlayersAtGame.SingleOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) != default)
                    {
                        <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                    }
                }
            </InputSelect>
            <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
        </div>
    </EditForm>
</div>

<h4>Players transactions in game</h4>
<p>Players that do not have enough funds on account to cover this game:</p>
<ul>
@foreach (var pagLowFunds in game.PlayersAtGame.Where(o => o.Player.Balance < o.Player.PlayerEntity.DefaultRate))
{
    <li><a href="/players/@pagLowFunds.Player.PlayerEntity.RowKey/player">@pagLowFunds.Player.PlayerEntity.Name</a>, balance on account: <CurrencyDisplay Amount="@pagLowFunds.Player.Transactions.Sum(o => o.Amount)" /></li>
}
</ul>

<p>Players with no transactions for this game:</p>
<ul>
@foreach (var pag in game.PlayersAtGame)
{
    var pagTrasnactions = game.TransactionsEntities.Where(o => o.PlayerRowKey == pag.Player.PlayerEntity.RowKey).Count();
    if (pagTrasnactions == 0)
    {
        <li><a href="/players/@pag.Player.PlayerEntity.RowKey/player">@pag.Player.PlayerEntity.Name</a></li>
    } 
}
</ul>

<h4>Transactions in game</h4>
<p>@game.TransactionsEntities.Count transactions totalling <CurrencyDisplay Amount="@game.TransactionsEntities.Sum(o => o.Amount)" />.</p>
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Date/Time</th>
            <th scope="col">Amount</th>
            <th scope="col">Player</th>
            <th scope="col" class="d-none d-lg-table-cell">Player at Game</th>
            <th scope="col" class="d-none d-lg-table-cell">Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transactionEntityForGame in game.TransactionsEntities)
        {
            <tr>
                <td><a href="/transactions/@transactionEntityForGame.RowKey">@transactionEntityForGame.Date.ToString("dd MMM yyyy HH:mm")</a></td>
                <td><CurrencyDisplay Amount="@transactionEntityForGame.Amount" /></td>
                <td><a href="/players/@transactionEntityForGame.PlayerRowKey/player">@players.SingleOrDefault(o => o.PlayerEntity.RowKey == transactionEntityForGame.PlayerRowKey).PlayerEntity.Name</a></td>
                @{var pagForTransaction = game.PlayersAtGame.SingleOrDefault(o => o.Player.PlayerEntity.RowKey == transactionEntityForGame.PlayerRowKey);}
                @if (pagForTransaction != default)
                {
                    <td class="d-none d-lg-table-cell"><a href="/pags/@pagForTransaction.PlayerAtGameEntity.RowKey">@pagForTransaction.Player.PlayerEntity.Name</a></td>
                }
                else
                {
                    <td class="d-none d-lg-table-cell">No player at game</td>
                }
                <td class="d-none d-lg-table-cell">@transactionEntityForGame.Notes</td>
            </tr>
        }
    </tbody>
</table>

<div class="modal-footer px-0">
    <DeleteButtonWithCheck EntityRowKey="@game.GameEntity.RowKey" EntityLabel="@pageTitle" EntityType="@typeof(GameEntity).ToString()" NavigateToUrl="/games" />
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private List<Player> players = new();

    private List<PlayerAtGame> pagsNoTeam;
    private TransactionEntity newPagTransactionEntity;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task AddPagTransaction()
    {
        await TransactionService.UpsertTransactionEntity(newPagTransactionEntity);
        await RefreshData();
    }

    private void NewPagTransactionPlayerChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var player = PlayerService.GetPlayer(e.Value.ToString());
            newPagTransactionEntity.Amount = player.PlayerEntity.DefaultRate;
        }
    }

    async Task RefreshData()
    {
        players = PlayerService.GetPlayers();
        game = await GameService.GetGame(GameRowKey);
        newPagTransactionEntity = new TransactionEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Date = DateTimeOffset.UtcNow,
            Notes = $"Credited for game {game.GameEntity.Date.Date.ToString("dd MMM yyyy")}"
        };
        pagsNoTeam = game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)).ToList();
        pageTitle = $"{game.GameEntity.Date.Date.ToString("dd MMM")}";

    }
    private void SwitchTabGame() => Navigation.NavigateTo($"/games/{@GameRowKey}/game");
    private void SwitchTabTeamsheet() => Navigation.NavigateTo($"/teamsheet/{@GameRowKey}");
}