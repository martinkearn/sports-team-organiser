@page "/games"
@inject IStorageService StorageService
@inject IGameService GameService

<PageTitle>TNF - Games</PageTitle>

<h1>Games</h1>

<div>
    <button class="btn btn-secondary me-3 mb-3" data-bs-toggle="modal" data-bs-target="#addGameModal"><i class="fa-solid fa-plus"></i> Add Game</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Forecast Players</th>
            <th scope="col">Actual Players</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var game in games)
        {
            <tr>
                <td><a href="/games/@game.GameEntity.RowKey">@game.GameEntity.Date.Date.ToLongDateString()</a></td>
                <td>@game.PlayersAtGame.Count()</td>
                <td>@game.PlayersAtGame.Where(pag => pag.PlayerAtGameEntity.Played).Count()</td>
            </tr>
        }
    </tbody>
</table>

<!-- Add Modal -->
<div class="modal fade" id="addGameModal" tabindex="-1" aria-labelledby="addGameModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addGameModalLabel">Add Game</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@newGame" OnValidSubmit="Add">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="addDate" class="form-label">Date</label>
                        <InputDate class="form-control" id="addDate" @bind-Value="newGame.Date" />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Add Game</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Game> games = new();

    private GameEntity newGame = new();

    protected override void OnInitialized()
    {
        RefreshData();
    }

    protected async Task Add()
    {
        await StorageService.UpsertEntity<GameEntity>(newGame);
        RefreshData();
    }

    private void RefreshData()
    {
        newGame = new();
        games = GameService.GetGames();
    }
}