@page "/players/{PlayerRowKey}"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-user me-2"></i> @pageTitle</h1>

@if (currentTab == "player")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabPlayer">Player</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
    </ul>

    <div class="mb-3">
        <label class="form-label">RowKey</label>
        <span class="form-control-plaintext">@player.PlayerEntity.RowKey</span>
    </div>

    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" id="addName" @bind-Value="player.PlayerEntity.Name" @bind-Value:after="() => Edit()" />
    </div>

    <div class="mb-3">
        <label fclass="form-label">Position</label>
        <InputSelect class="form-select" @bind-Value="player.PlayerEntity.Position" @bind-Value:after="() => Edit()">
            @foreach (string option in Enum.GetNames(typeof(PlayerPosition)))
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Default Rate</label>
        <div class="input-group">
            <span class="input-group-text">£</span>
            <InputNumber type="number" min="0" class="form-control" id="addDefaultRate" @bind-Value="player.PlayerEntity.DefaultRate" @bind-Value:after="() => Edit()"/>
        </div>
        <div class="form-text">Default rate per game. Usually £3 or £4.</div>
    </div>

    <div class="mb-3">
        <label class="form-label">Balance</label>
        <span class="form-control-plaintext">
            <CurrencyDisplay Amount="@player.Balance"/>
        </span>
    </div>
}

@if (currentTab == "transactions")
{
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" @onclick="SwitchTabPlayer">Player</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" @onclick="SwitchTabTransactions">Transactions</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Amount</th>
                <th scope="col" class="d-none d-lg-table-cell">Game</th>
                <th scope="col" class="d-none d-lg-table-cell">Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionEntity in player.Transactions)
            {
                var game = games.SingleOrDefault(o => o.GameEntity.RowKey == transactionEntity.GameRowKey);
                <tr>
                    <td><a href="/transactions/@transactionEntity.RowKey">@transactionEntity.Date.ToString("dd MMM yyyy HH:mm")</a></td>
                    <td><CurrencyDisplay Amount="@transactionEntity.Amount" /></td>
                    <td class="d-none d-lg-table-cell">
                        @if (game != default)
                        {
                            <a href="/games/@game.GameEntity.RowKey">@game.GameEntity.Date.Date.ToString("dd MMM")</a>
                        }
                    </td>
                    <td class="d-none d-lg-table-cell">@transactionEntity.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}


<div class="modal-footer">
    <a class="btn btn-secondary" href="/players/"><i class="fa-solid fa-arrow-left"></i>All Players</a>
    <button class="btn btn-secondary" @onclick="Delete"><i class="fa-solid fa-trash"></i> Delete</button>
</div>

@code {
    [Parameter]
    public string PlayerRowKey { get; set; }

    private Player player;

    private List<Game> games = new();

    private string pageTitle;

    private string currentTab = "player";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task Edit()
    {
        await PlayerService.UpsertPlayerEntity(player.PlayerEntity);
    }

    async Task Delete()
    {
        await PlayerService.DeletePlayer(player.PlayerEntity.RowKey);
        Navigation.NavigateTo("/players");
    }

    private async Task RefreshData()
    {
        games = await GameService.GetGames();
        player = PlayerService.GetPlayer(PlayerRowKey);
        pageTitle = $"{player.PlayerEntity.Name}";
    }

    private void SwitchTabPlayer() => currentTab = "player";
    private void SwitchTabTransactions() => currentTab = "transactions";
}