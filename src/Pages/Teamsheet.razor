@page "/teamsheet/{GameRowKey}"
@layout TeamsheetLayout
@inject IGameService GameService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h4>@pageTitle</h4>

@if ((game.TeamA != null) && (game.TeamB != null))
{
    <h5>Team A - @game.TeamA.Count()</h5>
    <p>
    @foreach (var pag in game.TeamA)
    {
        <span>@pag.Player.PlayerEntity.Name <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /></span>
        <br>
    }
    </p>

    <h5>Team B - @game.TeamB.Count() (wear bibs)</h5>
    <p>
    @foreach (var pag in game.TeamB)
    {
        <span>@pag.Player.PlayerEntity.Name <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /></span>
        <br>
    }
    </p>

    @if (game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)).Count() > 0)
    {
        <h5>No team assigned</h5>
        <p>
        @foreach (var pag in game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.PlayerAtGameEntity.Team)))
        {
            <span>@pag.Player.PlayerEntity.Name <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /></span>
            <br>  
        }
        </p>
    }
}  
else
{
    <p>No teams yet.</p>
}

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        game = await GameService.GetGame(GameRowKey);
        game.TeamA = game.TeamA.OrderBy(o => o.Player.PlayerEntity.Position).ToList();
        game.TeamB = game.TeamB.OrderBy(o => o.Player.PlayerEntity.Position).ToList();
        pageTitle = game.GameEntity.Date.ToString("dd MMM yyyy HH:mm");

    }
}