@page "/transactions/split/{TransactionRowKey}"
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-coins me-2"></i> @pageTitle</h1>
<p>This page will create a new transaction by taking money from an existing one.</p>

<h2>Original Transaction</h2>
<EditForm Model="@originalTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="addPlayerRowKey" class="form-label">Player & Game</label>
        <p class="form-control">@originalTransaction.Player.PlayerEntity.Name at @originalTransaction.Game.GameEntity.Date.Date.ToShortDateString()</p>
    </div>

    <div class="mb-3">
        <label for="addAmount" class="form-label">Amount</label>
        <p class="form-control">@originalTransaction.TransactionEntity.Amount</p>
    </div>
</EditForm>

<h2>New Transaction</h2>
<EditForm Model="@newTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="addAmount" class="form-label">Amount to take</label>        
        <div class="input-group">
            <span class="input-group-text">£</span>
            <InputNumber type="number" class="form-control" id="addAmount" @bind-Value="newTransaction.Amount" @bind-Value:after="() => UpdateNotes()"/>
            @* TO DO - ensure we cannot set more than the initial transaction *@
        </div>
    </div>

    <div class="mb-3">
        <label for="addAmount" class="form-label">Notes for original transaction</label>        
        <InputText class="form-control" id="addNotes" @bind-Value="updatedOriginalTransaction.Notes" />
    </div>

    <div class="mb-3">
        <label for="addAmount" class="form-label">Notes for new transaction</label>        
        <InputTextArea class="form-control" id="addNotes" @bind-Value="newTransaction.Notes" />
    </div>
</EditForm>

@code {
    [Parameter]
    public string TransactionRowKey { get; set; }

    private Transaction originalTransaction;

    private TransactionEntity newTransaction;

    private TransactionEntity updatedOriginalTransaction;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private void UpdateNotes()
    {   
        updatedOriginalTransaction.Amount = originalTransaction.TransactionEntity.Amount - newTransaction.Amount;
        updatedOriginalTransaction.Notes = $"Split on {DateTime.Now.Date.ToString("dd MMM")}. £{@newTransaction.Amount} taken into a new transaction, leaving £{@updatedOriginalTransaction.Amount} left in this one.";
        newTransaction.Notes = $"Created by spliting transaction {@originalTransaction.TransactionEntity.RowKey}. Split on {DateTime.Now.Date.ToString("dd MMM")}. £{@newTransaction.Amount} taken into this transaction, leaving £{@updatedOriginalTransaction.Amount} left in the original one.";
    }

    async Task RefreshData()
    {
        updatedOriginalTransaction = new TransactionEntity();
        newTransaction = new TransactionEntity();
        originalTransaction = await TransactionService.GetTransaction(TransactionRowKey);
        pageTitle = $"Split transaction: {@originalTransaction.Player.PlayerEntity.Name}, {@originalTransaction.TransactionEntity.Date.Date.ToString("dd MMM")}";
    }
}