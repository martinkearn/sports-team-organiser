@page "/transactions"
@inject ITransactionService TransactionService

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-coins me-2"></i> @pageTitle</h1>

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/transactions/add"><i class="fa-solid fa-plus"></i> Add Transaction</a>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Date)">Date</button></th>
            <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Amount)">Amount</button></th>
            <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Player)">Player</button></th>
            <th scope="col" class="d-none d-lg-table-cell"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Game)">Game</button></th>
            <th scope="col" class="d-none d-lg-table-cell">Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
        {
            <tr>
                <td><a href="/transactions/@transaction.TransactionEntity.RowKey">@transaction.TransactionEntity.Date.ToString("dd MMM yyyy HH:mm")</a></td>
                <td><CurrencyDisplay Amount="@transaction.TransactionEntity.Amount" /></td>
                <td><a href="/players/@transaction.Player.PlayerEntity.RowKey/player">@transaction.Player.PlayerEntity.Name</a></td>
                @if (transaction.Game != null)
                {
                    <td class="d-none d-lg-table-cell"><GameTitle GameRowKey="@transaction.Game.GameEntity.RowKey" Link="true" /></td>
                }
                else
                {
                    <td class="d-none d-lg-table-cell"></td>
                }
                <td class="d-none d-lg-table-cell">@transaction.TransactionEntity.Notes</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Transaction> transactions = new();
    private Enums.SortTransactionsBy currentSortBy;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private void SortTransactions(Enums.SortTransactionsBy by)
    {
        switch(by)
        {
            case Enums.SortTransactionsBy.Date:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.TransactionEntity.Date.Date).ToList() :
                    transactions.OrderBy(o => o.TransactionEntity.Date.Date).ToList();
                break;
            case Enums.SortTransactionsBy.Amount:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.TransactionEntity.Amount).ToList() :
                    transactions.OrderBy(o => o.TransactionEntity.Amount).ToList();
                break;
            case Enums.SortTransactionsBy.Player:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.Player.PlayerEntity.Name).ToList() :
                    transactions.OrderBy(o => o.Player.PlayerEntity.Name).ToList();
                break;
            case Enums.SortTransactionsBy.Game:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.Game == null ? DateTime.MinValue : o.Game.GameEntity.Date.Date).ToList() :
                    transactions.OrderBy(o => o.Game == null ? DateTime.MinValue : o.Game.GameEntity.Date.Date).ToList();
                break;
            default:
                transactions = transactions.OrderBy(o => o.TransactionEntity.Date.Date).ToList();
                break;
        }

        currentSortBy = by;
    }  

    async Task RefreshData()
    {
        transactions = await TransactionService.GetTransactions();
        pageTitle = "Transactions";
    }
}