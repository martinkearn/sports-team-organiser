@page "/transactions"
@inject ITransactionService TransactionService

<PageTitle>TNF - @pageTitle</PageTitle>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        <h1><i class="fa-solid fa-coins me-2"></i> @pageTitle</h1>

        <div>
            <a class="btn btn-secondary me-3 mb-3" href="/transactions/add"><i class="fa-solid fa-plus"></i> Add Transaction</a>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Date)">Date</button></th>
                    <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Amount)">Amount</button></th>
                    <th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Player)">Player</button></th>
                    <th scope="col" class="d-none d-lg-table-cell">Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in pageOfTransactions)
                {
                    <tr>
                        <td><a href="/transactions/@transaction.TransactionEntity.RowKey">@transaction.TransactionEntity.Date.ToString("dd MMM yyyy HH:mm")</a></td>
                        <td><CurrencyDisplay Amount="@transaction.TransactionEntity.Amount" /></td>
                        <td><a href="/players/@transaction.Player.PlayerEntity.RowKey/player">@transaction.Player.PlayerEntity.Name</a></td>
                        <td class="d-none d-lg-table-cell">@transaction.TransactionEntity.Notes</td>
                    </tr>
                }
            </tbody>
        </table>

        <nav aria-label="Page navigation">
        <ul class="pagination">
            @for (int p = 1; p <= pages; p++) {
                var thisPage = p;
                var css = (currentPageNumber == p) ? "page-item active" : "page-item";
                <li class="@css"><a class="page-link" @onclick="@(e => ChangePage(thisPage))">@p</a></li>
            }
        </ul>
        </nav>

        <p>@transactions.Count transactions. @transactionsPerPage per page.</p>
    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Transaction> transactions = new();

    private List<Transaction> pageOfTransactions = new();

    private int transactionsPerPage = 40;

    private int currentPageNumber = 1;  

    private int pages;

    private Enums.SortTransactionsBy currentSortBy;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private void SortTransactions(Enums.SortTransactionsBy by)
    {
        switch(by)
        {
            case Enums.SortTransactionsBy.Date:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.TransactionEntity.Date.Date).ToList() :
                    transactions.OrderBy(o => o.TransactionEntity.Date.Date).ToList();
                break;
            case Enums.SortTransactionsBy.Amount:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.TransactionEntity.Amount).ToList() :
                    transactions.OrderBy(o => o.TransactionEntity.Amount).ToList();
                break;
            case Enums.SortTransactionsBy.Player:
                transactions = (currentSortBy == by) ? 
                    transactions.OrderByDescending(o => o.Player.PlayerEntity.Name).ToList() :
                    transactions.OrderBy(o => o.Player.PlayerEntity.Name).ToList();
                break;
            default:
                transactions = transactions.OrderBy(o => o.TransactionEntity.Date.Date).ToList();
                break;
        }

        currentSortBy = by;
    }  

    private void ChangePage(int page)
    {
        currentPageNumber = page;
        pageOfTransactions = transactions.Skip((page-1)*transactionsPerPage).Take(transactionsPerPage).ToList();
    }

    async Task RefreshData()
    {
        transactions = await TransactionService.GetTransactions();
        pageTitle = "Transactions";

        // Setup paging
        pageOfTransactions = transactions.Take(transactionsPerPage).ToList();
        var pagesDec = (double)transactions.Count/(double)transactionsPerPage;
        pages = Convert.ToInt16(Math.Ceiling(pagesDec));
        currentPageNumber = 1;
    }
}