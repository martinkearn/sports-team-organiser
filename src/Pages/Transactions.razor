@page "/transactions"
@inject IStorageService StorageService
@inject NavigationManager Navigation

<PageTitle>TNF - Transactions</PageTitle>

<h1>Transactions</h1>

<div>
    <a class="btn btn-secondary me-3 mb-3" href="/transactions/add"><i class="fa-solid fa-plus"></i> Add Transaction</a>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Amount</th>
            <th scope="col">Player</th>
            <th scope="col" class="d-none d-lg-table-cell">Game</th>
            <th scope="col" class="d-none d-lg-table-cell">Notes</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
        {
            <tr>
                <td>@transaction.Date.Date.ToShortDateString()</td>
                <td>Currency here</td>
                @* <CurrencyDisplay Amount="@transaction.Amount" /> *@
                <td>@players.Single(p => p.RowKey == transaction.PlayerRowKey).Name</td>
                <td class="d-none d-lg-table-cell">@games.SingleOrDefault(g => g.RowKey == transaction.GameRowKey)?.Date.Date.ToShortDateString()</td>
                <td class="d-none d-lg-table-cell">@transaction.Notes</td>
                <td>
                    <button type="button" class="btn btn-outline-secondary" @onclick="@(e => DeleteTransaction(transaction.RowKey))"><i class="fa-solid fa-trash"></i> Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Transaction> transactions = new();
    private List<Player> players = new();

    private List<Game> games = new();

    protected override void OnInitialized()
    {
        RefreshData();
    }

    protected async Task EditTransaction(Transaction editedTransaction)
    {
        await StorageService.UpsertEntity<Transaction>(editedTransaction);
        RefreshData();
    }

    async Task DeleteTransaction(string rowKey)
    {
        await StorageService.DeleteEntity<Transaction>(rowKey);
        RefreshData();
    }

    private void RefreshData()
    {
        transactions = StorageService.QueryEntities<Transaction>(default)
            .OrderByDescending(t => t.Date)
            .ToList();
        players = StorageService.QueryEntities<Player>(default)            
            .OrderBy(p => p.Name)
            .ToList();
        games = StorageService.QueryEntities<Game>(default)
            .OrderByDescending(g => g.Date)
            .ToList();
    }
}