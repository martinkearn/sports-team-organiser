@page "/transactions"
@inject IStorageService StorageService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>TNF - Transactions</PageTitle>

<div>
    <button class="btn btn-secondary me-3 mb-3" data-bs-toggle="modal" data-bs-target="#addTransactionModal"><i class="fa-solid fa-plus"></i> Add Transaction</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Amount</th>
            <th scope="col">Player</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
        {
            <tr>
                <td>@transaction.Date.Date.ToShortDateString()</td>
                <td>@transaction.Amount.ToString("C", CultureInfo.CurrentCulture)</td>
                <td>@players.Single(p => p.RowKey == transaction.PlayerRowKey).Name</td>
                <td>
                    <button type="button" class="btn btn-outline-secondary" @onclick="@(e => DeleteTransaction(transaction.RowKey))"><i class="fa-solid fa-trash"></i> Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Add Modal -->
<div class="modal fade" id="addTransactionModal" tabindex="-1" aria-labelledby="addTransactionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="addTransactionModalLabel">Add Game</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <EditForm Model="@newTransaction" OnValidSubmit="AddTransaction">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="addPlayerRowKey" class="form-label">Player</label>
                <InputSelect class="form-select" @bind-Value="newTransaction.PlayerRowKey">
                    <option value="">Select player ...</option>
                    @foreach (var player in players)
                    {
                        <option value="@player.RowKey">@player.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="addDate" class="form-label">Date</label>
                <InputDate class="form-control" id="addDate" @bind-Value="newTransaction.Date" />
            </div>

            <div class="mb-3">
                <label for="addAmount" class="form-label">Amount</label>
                <div class="input-group">
                    <span class="input-group-text">Â£</span>
                    <InputNumber type="number" class="form-control" id="addAmount" @bind-Value="newTransaction.Amount" />
                </div>
                <div class="form-text">Positive for payments, negative to pay for a played game.</div>
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Add Transaction</button>
            </div>
        </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
    private List<Transaction> transactions = new();
    private List<Player> players = new();

    private Transaction newTransaction = new();

    protected override void OnInitialized()
    {
        RefreshData();
    }

    protected async Task AddTransaction()
    {
        await StorageService.UpsertEntity<Transaction>(newTransaction);
        RefreshData();
    }

    protected async Task EditTransaction(Transaction editedTransaction)
    {
        await StorageService.UpsertEntity<Transaction>(editedTransaction);
        RefreshData();
    }

    async Task DeleteTransaction(string rowKey)
    {
        await StorageService.DeleteEntity<Transaction>(rowKey);
        RefreshData();
    }

    private void RefreshData()
    {
        newTransaction = new();
        transactions = StorageService.QueryEntities<Transaction>(default)
            .OrderByDescending(g => g.Date)
            .ToList();
        players = StorageService.QueryEntities<Player>(default)            
            .OrderBy(g => g.Name)
            .ToList();;
    }
}