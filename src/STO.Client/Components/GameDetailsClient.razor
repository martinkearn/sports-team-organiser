@page "/clientgames/{GameRowKey}"
@inject IGameService GameService
@inject IPlayerService PlayerService
@rendermode InteractiveAuto

<h1><i class="fa-solid fa-people-group me-2"></i> <GameTitle @rendermode="RenderMode.InteractiveAuto" Game="@game" Link="false" /></h1>

<p>@game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Yes.ToString()).Count() yes, @game.PlayersAtGame.Where(p => p.PlayerAtGameEntity.Forecast == PlayingOptions.Maybe.ToString()).Count() maybe. @game.GameEntity.Date.TimeOfDay.Hours:@game.GameEntity.Date.TimeOfDay.Minutes kick off.</p>
<p>@game.GameEntity.Notes</p>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        <div class="row">
            <div class="col">
                <EditForm Model="@newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center" Context="NewPagEntity">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group col-12">
                        <InputSelect class="form-select" @bind-Value="newPagEntity.PlayerRowKey">
                            <option value="">Add player to game ...</option>
                            @foreach (var player in players)
                            {
                                if (game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerAtGameEntity.PlayerRowKey == player.PlayerEntity.RowKey) == default)
                                {
                                    <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
                                }
                            }
                        </InputSelect>
                        <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
                    </div>
                </EditForm>
            </div>
        </div>
        <br>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private PlayerAtGameEntity newPagEntity;   
    
    private List<Player> players = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshGameData();
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntity(newPagEntity);
        await RefreshGameData();
    }

    async Task RefreshGameData()
    {
        game = await GameService.GetGame(GameRowKey);
        players = PlayerService.GetPlayers();
        newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = game.GameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
    }
}