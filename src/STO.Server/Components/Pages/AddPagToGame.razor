@page "/quickaddpag"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Add Player to Game</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> Add Player to Game</h1>

<EditForm Model="@newPagEntity" OnValidSubmit="AddPagEntity" Context="NewPagEntity">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="addPlayerRowKey" class="form-label">Player</label>
        <InputSelect class="form-select" @bind-Value="newPagEntity.PlayerRowKey">
            <option value="">Select Player ...</option>
            @foreach (var player in players)
            {
                <option value="@player.PlayerEntity.RowKey">@player.PlayerEntity.Name</option>
            }
        </InputSelect>
    </div>

    @if (nextGame is not null)
    {
        <p>Next game is <GameTitle Game="@nextGame" /></p>
    }
    else
    {
        <p>No future games avaliable.</p>
    }

    <div class="mb-3">
        <label for="addGameRowKey" class="form-label">Game</label>
        <InputSelect class="form-select" @bind-Value="newPagEntity.GameRowKey">
            <option value="">Select Game ...</option>
            @foreach (var game in games)
            {
                if (game.GameEntity.RowKey == nextGame.GameEntity.RowKey)
                {
                    <option value="@game.GameEntity.RowKey" selected><GameTitle Game="@game" Link="false" /></option>
                }
                else
                {
                    <option value="@game.GameEntity.RowKey"><GameTitle Game="@game" Link="false" /></option>
                }
            }
        </InputSelect>
    </div>

    <div class="modal-footer">
        <button type="submit" class="btn btn-primary"><i class="fa-solid fa-plus"></i> Add Player</button>
    </div>
</EditForm>

@code {
    private List<Game> games = new();
    private List<Player> players = new();

    private PlayerAtGameEntity newPagEntity;

    private Game nextGame;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntity(newPagEntity);
        var nav = $"/games/{newPagEntity.GameRowKey}";
        Navigation.NavigateTo(nav);
    }

    async Task RefreshData()
    {
        games = await GameService.GetGames();
        players = PlayerService.GetPlayers();
        nextGame = await GameService.GetNextGame();

        newPagEntity = new PlayerAtGameEntity()
        {
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
    }
}