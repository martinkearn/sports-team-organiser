@inject NavigationManager Navigation

<AuthorizeView Policy="IsAdminEmail">
  <Authorized>
    <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#confirmationModal"><i class="fa-solid fa-trash"></i> @ButtonLabel</button>
  </Authorized>
  <NotAuthorized>
    <button class="btn btn-danger" disabled><i class="fa-solid fa-trash"></i> @ButtonLabel</button>
  </NotAuthorized>
</AuthorizeView>

<!-- Modal -->
<div class="modal" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="confirmationModalLabel">Are you sure?</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Deleting <b>@DeleteWhatLabel</b>.</p>
        <p>This will permanently delete this item.</p>
        <p>Please confirm.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => CallParent()"><i class="fa-solid fa-trash"></i> Yes, really delete</button>
      </div>
    </div>
  </div>
</div>

@code {
    [Parameter]
    public string? DeleteWhatLabel { get; set; }

    [Parameter]
    public string? ButtonLabel { get; set; }

    [Parameter]
    public EventCallback ParentPageCallback { get; set; }

    protected async Task CallParent()
    {
        await ParentPageCallback.InvokeAsync();
    }
}