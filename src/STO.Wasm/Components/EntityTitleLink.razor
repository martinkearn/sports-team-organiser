@inject IGameEntityService GameEntityService
@inject IRatingEntityService RatingEntityService
@inject ITransactionEntityService TransactionEntityService
@inject IPlayerService PlayerService

@if (Link)
{
    @switch (EntityType)
    {
        case Enums.EntityType.GameEntity:
            <a href="/games/@_gameEntity.UrlSegment">@Label</a>
            break;
        case Enums.EntityType.PlayerAtGameEntity:
            <a href="/games/@_gameEntity.UrlSegment/@_playerAtGameEntity.UrlSegment">@Label</a>
            break;
        case Enums.EntityType.TransactionEntity:
            <a href="/transactions/@_transactionEntity.UrlSegment">@Label</a>
            break;
        case Enums.EntityType.RatingEntity:
            <a href="/ratings/@_ratingEntity.UrlSegment">@Label</a>
            break;
        default:
            @Label
            break;
    }
}
else
{
    @Label
}

@code {
    [Parameter] public string RowKey { get; set; } = default!;

    [Parameter] public string Label { get; set; } = default!;

    [Parameter] public bool Link { get; set; } = true;

    [Parameter] public Enums.EntityType EntityType { get; set; }

    [Parameter] public Enums.TitleLength Length { get; set; } = Enums.TitleLength.Short;

    private GameEntity _gameEntity = default!;

    private PlayerAtGameEntity _playerAtGameEntity = default!;

    private TransactionEntity _transactionEntity = default!;

    private RatingEntity _ratingEntity = default!;

    protected override void OnInitialized()
    {
        RefreshData();
    }
    
    protected override void OnParametersSet()
    {
        // Refresh the data every time the component's parameters are set (e.g., when navigated to)
        RefreshData();
    }
    
    private void RefreshData()
    {
        if (RowKey is null) throw new ArgumentException();

        switch (EntityType)
        {
            case Enums.EntityType.GameEntity:
                _gameEntity = GameEntityService.GetGameEntity(RowKey);
                if (string.IsNullOrEmpty(Label))
                {
                    Label = GameEntityService.GetGameLabel(RowKey, Length);
                }

                break;
            case Enums.EntityType.PlayerAtGameEntity:
                _playerAtGameEntity = GameEntityService.GetPlayerAtGameEntity(RowKey);
                _gameEntity = GameEntityService.GetGameEntity(_playerAtGameEntity.GameRowKey);
                if (string.IsNullOrEmpty(Label))
                {
                    Label = GameEntityService.GetPlayerAtGameLabel(_playerAtGameEntity.RowKey, Length);
                }
                
                break;
            case Enums.EntityType.TransactionEntity:
                _transactionEntity = TransactionEntityService.GetTransactionEntity(RowKey);
                var player = PlayerService.GetPlayer(_transactionEntity.PlayerRowKey);
                if (string.IsNullOrEmpty(Label))
                {
                    var transactionLabel = Length switch
                    {
                        Enums.TitleLength.Short => _transactionEntity.Date.ToString("dd-MM-yy"),
                        Enums.TitleLength.Long => _transactionEntity.Date.ToString("dd MMM yyyy HH:mm"),
                        _ => _transactionEntity.Date.ToString("dd-MM-yy")
                    };
                    Label = $"{transactionLabel} for {player.Name}";
                }
                
                break;
            case Enums.EntityType.RatingEntity:
                _ratingEntity = RatingEntityService.GetRatingEntity(RowKey);
                if (string.IsNullOrEmpty(Label))
                {
                    Label = RatingEntityService.FormatRatingTime(_ratingEntity.RowKey, Length);
                }
                
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
}