@inject IGameService GameService
@inject ITransactionService TransactionService

@if (pag.PlayerAtGameEntity.Played)
{
    <button type="button" class="btn btn-outline-secondary btn-sm active d-none d-md-inline" @onclick="TogglePlayed"> Played</button>
}
else
{
    <button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="TogglePlayed"> Not Played</button>
}
<span></span>
<button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="SwitchPagTeam">@pag.PlayerAtGameEntity.Team <i class="fa-solid fa-repeat"></i></button>
<button type="button" class="btn btn-outline-secondary btn-sm d-none d-lg-inline" @onclick="() => AddTransactionForPlayer(pag.Player.PlayerEntity.DefaultRate)"><i class="fa-solid fa-plus"></i> Â£@pag.Player.PlayerEntity.DefaultRate</button>
<a type="button" class="btn btn-outline-secondary btn-sm d-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey"><i class="fa-solid fa-edit"></i> Edit</a>

@code {
    [Parameter]
    public PlayerAtGame pag { get; set; } = default!;

    [Parameter]
    public EventCallback RefreshMainPage { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task TogglePlayed()
    {
        await GameService.TogglePlayerAtGamePlayed(pag.PlayerAtGameEntity, null);
        await RefreshMainPage.InvokeAsync();
    }

    async Task SwitchPagTeam()
    {
        if (pag.PlayerAtGameEntity.Team == "A")
        {
            pag.PlayerAtGameEntity.Team = "B";
        }
        else if (pag.PlayerAtGameEntity.Team == "B")
        {
            pag.PlayerAtGameEntity.Team = "";
        }
        else
        {
            pag.PlayerAtGameEntity.Team = "A";
        }
        await GameService.UpsertPlayerAtGameEntity(pag.PlayerAtGameEntity);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task AddTransactionForPlayer(double amount)
    {
        var newTransactionEntityForPag = new TransactionEntity()
            {
                Date = DateTimeOffset.UtcNow,
                Notes = await GameService.GetNotesForGame(pag.GameEntity.RowKey),
                PlayerRowKey = pag.Player.PlayerEntity.RowKey,
                Amount = amount
            };
        await TransactionService.UpsertTransactionEntity(newTransactionEntityForPag);
        await RefreshMainPage.InvokeAsync();
    }

    async Task RefreshData()
    {
        var game = await GameService.GetGame(pag.GameEntity.RowKey);
        pag = game.PlayersAtGame.Single(o => o.Player.PlayerEntity.RowKey == pag.Player.PlayerEntity.RowKey);
        await RefreshMainPage.InvokeAsync();
    }

}