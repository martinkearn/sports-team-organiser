@inject IPlayerAtGameEntityService PlayerAtGameEntityService
@inject ITransactionService TransactionService
@inject IPlayerService PlayerService

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        <div class="hstack gap-2">
            @if (PagEntity.Forecast == Enums.PlayingStatus.Yes)
            {
                @if (PagEntity.Played)
                {
                    <button type="button" class="btn btn-outline-secondary btn-sm active d-inline" @onclick="TogglePlayed"><i class="fa-solid fa-person-running"></i> Played</button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary btn-sm d-inline" @onclick="TogglePlayed"> <i class="fa-solid fa-person-running"></i> Not Played</button>
                }
                
                @if (PagEntity.Team == string.Empty)
                {
                    <button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="() => SwitchPagTeam(Enums.Team.A)"> +A <i class="fa-solid fa-repeat"></i></button>
                    <button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="() => SwitchPagTeam(Enums.Team.B)"> +B <i class="fa-solid fa-repeat"></i></button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="() => SwitchPagTeam(Enums.Team.None)">@PagEntity.Team <i class="fa-solid fa-repeat"></i></button>
                }

                <button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="AddTransactionForPlayer"><i class="fa-solid fa-plus"></i> Â£@_player.DefaultRate</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-secondary btn-sm d-inline" @onclick="ForecastYesForPlayer"><i class="fa-solid fa-futbol"></i> Now Playing</button>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public PlayerAtGameEntity PagEntity { get; set; } = null!;

    [Parameter]
    public EventCallback RefreshMainPage { get; set; }

    private Player _player = null!;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task TogglePlayed()
    {
        await PlayerAtGameEntityService.TogglePlayerAtGamePlayedAsync(PagEntity, null);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task SwitchPagTeam(Enums.Team team)
    {
        if (team == Enums.Team.None)
        {
            // No team set so swap to opposite team or A if nothing is set
            PagEntity.Team = PagEntity.Team switch
            {
                "A" => "B",
                "B" => "A",
                _ => "A"
            };
        }
        else
        {
            PagEntity.Team = team.ToString();
        }

        await PlayerAtGameEntityService.UpsertPlayerAtGameEntityAsync(PagEntity);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task AddTransactionForPlayer()
    {
        var newTransactionForPag = new Transaction()
            {
                DateTime = DateTime.UtcNow,
                PlayerId = PagEntity.PlayerRowKey,
                GameId = PagEntity.GameRowKey,
                Amount = _player.DefaultRate
            };
        if (TransactionService is not null)
        {
            await TransactionService.UpsertTransactionAsync(newTransactionForPag);
        }
        await RefreshMainPage.InvokeAsync();
    }

    private async Task ForecastYesForPlayer()
    {
        PagEntity.Forecast = Enums.PlayingStatus.Yes;
        PagEntity.Team = string.Empty;
        await PlayerAtGameEntityService.UpsertPlayerAtGameEntityAsync(PagEntity);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task RefreshData()
    {
        _player = PlayerService.GetPlayer(PagEntity.PlayerRowKey);
        await RefreshMainPage.InvokeAsync();
    }

}