@inject IGameService GameService
@inject ITransactionService TransactionService
@inject  IPlayerService PlayerService;

@if (PagEntity.Played)
{
    <button type="button" class="btn btn-outline-secondary btn-sm active d-none d-md-inline" @onclick="TogglePlayed"> Played</button>
}
else
{
    <button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="TogglePlayed"> Not Played</button>
}
<span></span>
<button type="button" class="btn btn-outline-secondary btn-sm d-none d-md-inline" @onclick="SwitchPagTeam">@PagEntity.Team <i class="fa-solid fa-repeat"></i></button>
<button type="button" class="btn btn-outline-secondary btn-sm d-none d-lg-inline" @onclick="AddTransactionForPlayer"><i class="fa-solid fa-plus"></i> Â£@_pagDefaultAmount</button>
<a type="button" class="btn btn-outline-secondary btn-sm d-inline" href="/pags/@PagEntity.RowKey"><i class="fa-solid fa-edit"></i> Edit</a>

@code {
    [Parameter]
    public PlayerAtGameEntity PagEntity { get; set; } = default!;

    [Parameter]
    public EventCallback RefreshMainPage { get; set; } = default!;

    private double _pagDefaultAmount = default;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task TogglePlayed()
    {
        await GameService.TogglePlayerAtGamePlayedAsync(PagEntity, null);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task SwitchPagTeam()
    {
        if (PagEntity.Team == "A")
        {
            PagEntity.Team = "B";
        }
        else if (PagEntity.Team == "B")
        {
            PagEntity.Team = "";
        }
        else
        {
            PagEntity.Team = "A";
        }
        await GameService.UpsertPlayerAtGameEntityAsync(PagEntity);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task AddTransactionForPlayer()
    {
        var newTransactionEntityForPag = new TransactionEntity()
            {
                Date = DateTimeOffset.UtcNow,
                Notes = GameService.GetNotesForGame(PagEntity.GameRowKey),
                PlayerRowKey = PagEntity.PlayerRowKey,
                Amount = _pagDefaultAmount
            };
        if (TransactionService is not null)
        {
            await TransactionService.UpsertTransactionEntityAsync(newTransactionEntityForPag);
        }
        await RefreshMainPage.InvokeAsync();
    }

    private async Task RefreshData()
    {
        var game = GameService.GetGameEntity(PagEntity.GameRowKey);
        _pagDefaultAmount = PlayerService.GetDefaultRateForPlayerEntity(PagEntity.PlayerRowKey);
        await RefreshMainPage.InvokeAsync();
    }

}