@page "/quickaddtransactions"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>Add Payments to Game</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> Add Payments to Game</h1>

<div class="mb-3">
    <label class="form-label">Game</label>
    <InputSelect class="form-select" @bind-Value="_selectedGameRowKey" @bind-Value:after="RefreshGame">
        <option value="">Select Game ...</option>
        @foreach (var ge in _gameEntities)
        {
            var gameRowKey = ge.RowKey;
            if (gameRowKey == _nextGameEntity?.RowKey)
            {
                <option value="@gameRowKey" selected><GameEntityTitle GameEntity="@ge" Link="false" /></option>
            }
            else
            {
                <option value="@gameRowKey"><GameEntityTitle GameEntity="@ge" Link="false" /></option>
            }
        }
    </InputSelect>
</div>

<div class="mb-3">
    <label class="form-label">Players to add payments for</label>
    <InputSelect class="form-select" @bind-Value="_selectedProspectPagPlayerRowKey" @bind-Value:after="AddProspectTransaction">
        <option value="" selected>Choose Player ...</option>
        @foreach (var pe in _pagPlayerEntities)
        {
            <option value="@pe.RowKey">@pe.Name</option>
        }
    </InputSelect>
</div>

<div class="mb-3">
    <label class="form-label">Prospective Payments</label>
    @foreach (var prospectTransaction in _prospectTransactions)
    {
        <p><CurrencyDisplay Amount="@prospectTransaction.Amount" BlackText="true"></CurrencyDisplay> for <PlayerName PlayerRowKey="@prospectTransaction.PlayerRowKey" Link="false"></PlayerName> <button class="btn btn-outline-secondary btn-sm d-inline" @onclick="() => RemoveProspectTransaction(prospectTransaction)"> x</button></p>
    }
</div>

<div class="modal-footer">
    <button class="btn btn-primary" @onclick="AddProspectTransactionsToGame"><i class="fa-solid fa-plus"></i> Add @_prospectTransactions.Count Payments to Game</button>
</div>

@code {
    private List<GameEntity> _gameEntities = [];

    private List<PlayerEntity> _pagPlayerEntities = [];

    private List<TransactionEntity> _prospectTransactions = [];

    private string _selectedProspectPagPlayerRowKey = default!;

    private string _selectedGameRowKey = default!;

    private GameEntity _nextGameEntity = default!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private void AddProspectTransaction()
    {
        var pe = PlayerService.GetPlayerEntity(_selectedProspectPagPlayerRowKey);
        var prospectTransaction = new TransactionEntity()
        {
            PlayerRowKey = _selectedProspectPagPlayerRowKey,
            Amount = pe.DefaultRate,
        };
        _prospectTransactions.Add(prospectTransaction);
    }

    private async Task AddProspectTransactionsToGame()
    {
        if (string.IsNullOrEmpty(_selectedProspectPagPlayerRowKey)) return;
        
        foreach (var prospectTransaction in _prospectTransactions)
        {
            await TransactionService.UpsertTransactionEntityAsync(prospectTransaction);
        }

        var nav = $"/games/{_selectedGameRowKey}";
        Navigation.NavigateTo(nav);
    }

    private void RemoveProspectTransaction(TransactionEntity pt)
    {
        _prospectTransactions.Remove(pt);
    }

    private void RefreshGame()
    {
        if (string.IsNullOrEmpty(_selectedGameRowKey)) return;
        
        _prospectTransactions.Clear();
        var pags = GameService.GetPlayerAtGameEntitiesForGame(_selectedGameRowKey);
        _pagPlayerEntities = PlayerService.GetPlayerEntitiesFromPags(pags);
    }

    private void RefreshData()
    {
        _gameEntities = GameService.GetGameEntities();
        _nextGameEntity = GameService.GetNextGameEntity();
        _selectedGameRowKey = _nextGameEntity.RowKey;
        RefreshGame();
    }

}