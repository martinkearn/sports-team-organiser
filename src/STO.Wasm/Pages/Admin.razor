@page "/admin"
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment Env
@using System.Security.Claims
@using STO.Models.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDataService DataService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-key me-2"></i> @_pageTitle</h1>

<p>SettingsFile: <b>@Configuration["SettingsFile"]</b></p>

<p>StorageConfiguration:ApiHost: <b>@Configuration["ApiConfiguration:ApiHost"]</b></p>

<p>AzureAdB2C:ClientId: <b>@Configuration["AzureAdB2C:ClientId"]</b></p>

<p>AzureAdB2C:Authority: <b>@Configuration["AzureAdB2C:Authority"]</b></p>

<p>Environment: <b>@Env.Environment</b></p>

@*<p>Authentication state: <b>@context.User.Identity?.Name</b></p>*@

<p>IsAdminEmail?: <b>Yes</b></p>

<p>Claims</p>
@if (_claims.Any())
{
	<ul>
		@foreach (var claim in _claims)
		{
			<li>@claim.Type: @claim.Value</li>
		}
	</ul>
}

<AuthorizeView Policy="IsAdminEmail">
	<Authorized>
		<h2>Backend Jobs</h2>
		<p>@_updateStatus</p>
		
		<h2>Data</h2>
		<div class="hstack gap-2">
			<button class="btn btn-secondary" @onclick="ClearLocalData">Clear Local Data</button>
			<button class="btn btn-secondary" @onclick="() => RefreshData(true)">Refresh Data</button>
		</div>
		@foreach (var p in DataService.PlayerEntities.OrderByDescending(p => p.Timestamp))
		{
			<p><a href="/players/@p.UrlSegment">Player, @p.RowKey, @p.Name</a></p>
		}
		@foreach (var g in _allGames.OrderByDescending(p => p.Timestamp))
		{
			<p><a href="/games/@g.UrlSegment">Game, @g.RowKey, @g.Date</a></p>
		}
		@foreach (var t in DataService.TransactionEntities.OrderByDescending(p => p.Timestamp))
		{
			<p><a href="/transactions/@t.UrlSegment">Transaction, @t.RowKey, @t.Date, @t.Amount</a></p>
		}
		@foreach (var pag in _allPlayerAtGame.OrderByDescending(p => p.Timestamp))
		{
			<p><a href="/games/pags/@pag.UrlSegment">PlayerAtGame, @pag.RowKey, @pag.PlayerRowKey, @pag.GameRowKey</a></p>
		}
		@foreach (var r in _allRatings.OrderByDescending(p => p.Timestamp))
		{
			<p><a href="/ratings/@r.UrlSegment">Rating, @r.RowKey, @r.PlayerRowKey, @r.GameRowKey, @r.Rating</a></p>
		}

		<BootstrapBreakpoints/>

	</Authorized>
	<NotAuthorized>
		<h4>Access Denied!</h4>
		<a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
	</NotAuthorized>
</AuthorizeView>


@* ReSharper disable once NotAccessedField.Compiler *@
@code {
	[CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
	private List<GameEntity> _allGames = [];
	private List<PlayerAtGameEntity> _allPlayerAtGame = [];
	private List<RatingEntity> _allRatings = [];
	private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
	private string _pageTitle = default!;
	private string _updateStatus = default!;
	
	protected override async Task OnInitializedAsync()
	{
		await RefreshData(false);
	}

	private async Task RefreshData(bool forceApi)
	{
		_pageTitle = "Admin";
		MainLayout.SetPageTitle(_pageTitle);
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			_claims = user.Claims;
		}

		await DataService.LoadDataAsync(forceApi, false);
		_allGames = await DataService.QueryEntitiesAsync<GameEntity>();
		_allPlayerAtGame = await DataService.QueryEntitiesAsync<PlayerAtGameEntity>();
		_allRatings = await DataService.QueryEntitiesAsync<RatingEntity>();
	}

	private async Task ClearLocalData()
	{
		await DataService.ClearLocalDataAsync();
	}

}
