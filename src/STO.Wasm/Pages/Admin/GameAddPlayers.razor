@page "/admin/games/addplayerstogame"
@layout AdminLayout
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject IPlayerAtGameEntityService PlayerAtGameEntityService
@inject NavigationManager Navigation

<PageTitle>@_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @_pageTitle</h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>

        <div class="mb-3">
            <label class="form-label">Game</label>
            <InputSelect class="form-select" @bind-Value="_selectedGameId" @bind-Value:after="RefreshGame">
                <option value="">Select Game ...</option>
                @foreach (var g in _games)
                {
                    var gameId = g.Id;
                    if (gameId == _nextGame?.Id)
                    {
                        <option value="@gameId" selected><GameLink GameLabel="@g.Label" GameUrlSegment="@g.UrlSegment" /></option>
                    }
                    else
                    {
                        <option value="@gameId"><GameLink GameLabel="@g.Label" GameUrlSegment="@g.UrlSegment" /></option>
                    }
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Playing status for prospective players</label>
            <InputSelect class="form-select" @bind-Value="_selectedPlayingStatus" >
                @foreach (var playingStatus in Enum.GetValues<Enums.PlayingStatus>())
                {
                    <option value="@playingStatus">@playingStatus</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Add prospective players</label>
            <InputSelect class="form-select" @bind-Value="_selectedProspectPagPlayerRowKey" @bind-Value:after="AddProspectPag">
                <option value="" selected>Choose Player ...</option>
                @foreach (var player in _players)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </InputSelect>
        </div>

    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
        <a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
    </NotAuthorized>
</AuthorizeView>

    @if (_prospectPags.Count > 0)
{
    <div class="mb-3">
        <label class="form-label">Prospective players</label>
        @foreach (var prospectPag in _prospectPags)
        {
            var player = PlayerService.GetPlayer(prospectPag.PlayerRowKey);
            <p><PlayerLink PlayerName="@player.Name" PlayerUrlSegment="@player.UrlSegment" /> @prospectPag.Forecast.ToString()</p>
        }
    </div>

    <div class="hstack gap-2">
        <button class="btn btn-secondary" @onclick="AddProspectPagsToGame"><i class="fa-solid fa-plus"></i> Add @_prospectPags.Count Players to Game</button>
    </div>   
}

@code {
    [CascadingParameter] public AdminLayout Layout { get; set; } = null!;
    
    private List<Game> _games = [];

    private List<Player> _players = [];

    private List<PlayerAtGameEntity> _prospectPags = [];

    private string _selectedProspectPagPlayerRowKey = null!;

    private string _selectedGameId = null!;

    private Game _selectedGame = null!;

    private Game _nextGame = null!;

    private Enums.PlayingStatus _selectedPlayingStatus = default!;
    
    private string _pageTitle = null!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private void AddProspectPag()
    {
        var prospectPag = new PlayerAtGameEntity()
        {
            PlayerRowKey = _selectedProspectPagPlayerRowKey,
            GameRowKey = _selectedGameId,
            Played = false,
            Forecast = _selectedPlayingStatus,
            Team = string.Empty
        };
        _prospectPags.Add(prospectPag);
    }

    private async Task AddProspectPagsToGame()
    {
        foreach (var prospectPag in _prospectPags)
        {
            await PlayerAtGameEntityService.UpsertPlayerAtGameEntityAsync(prospectPag);
        }

        var nav = $"/games/{_selectedGame.UrlSegment}";
        Navigation.NavigateTo(nav);
    }

    private void RefreshGame()
    {
        if (string.IsNullOrEmpty(_selectedGameId)) return;
        _selectedGame = _games.Single(g => g.Id == _selectedGameId);
        _prospectPags.Clear();
    }

    private void RefreshData()
    {
        _games = GameService.GetGames(null, null);
        _players = PlayerService.GetPlayers();
        _nextGame = GameService.GetNextGame();
        _selectedGameId = _nextGame.Id;
        _selectedGame = _nextGame;
        _pageTitle = "Add Players to Game";
        Layout.SetPageTitle(_pageTitle);
    }

}