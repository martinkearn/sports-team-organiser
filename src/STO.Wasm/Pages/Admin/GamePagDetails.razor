@page "/admin/games/{GameUrlSegment}/{PagUrlSegment}"
@layout AdminLayout
@inject IGameService GameService
@inject IPlayerAtGameEntityService PlayerAtGameEntityService
@inject ITransactionService TransactionService
@inject IPlayerService PlayerService
@inject NavigationManager Navigation

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @_pageTitle</h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>

        <div class="mb-3">
            <label class="form-label">Playing Forecast</label>
            <InputSelect class="form-select" @bind-Value=_pagEntity.Forecast @bind-Value:after="Edit">
                @foreach (var playingStatus in Enum.GetValues<Enums.PlayingStatus>())
                {
                    <option value="@playingStatus">@playingStatus</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Played</label>
            <InputSelect class="form-select" @bind-Value=_pagEntity.Played @bind-Value:after="EditPlayed">
                <option value="true">Yes</option>
                <option value="false">No</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Team</label>
            <InputSelect class="form-select" @bind-Value=_pagEntity.Team @bind-Value:after="Edit">
                <option value="A">Team A</option>
                <option value="B">Team B</option>
                <option value="">No Team</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Add Payment</label>
            <br>
            <button class="btn btn-outline-secondary" @onclick="AddTransactionForPlayer"><i class="fa-solid fa-plus"></i> @_player.DefaultRate</button>
            <br>
            <span>Balance: <CurrencyDisplay Amount="@_player.Balance" /></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Player Name</label>
            <span class="form-control bg-body-secondary"><PlayerLink PlayerName="@_player.Name" PlayerUrlSegment="@_player.UrlSegment" /></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Game</label>
            <span class="form-control bg-body-secondary"><GameLink GameLabel="@_game.Label" GameUrlSegment="@_game.UrlSegment" /></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Url Segment</label>
            <span class="form-control bg-body-secondary" disabled="true">@_pagEntity.UrlSegment</span>
        </div>

        <div class="mb-3">
            <label class="form-label">Last Updated</label>
            <span class="form-control bg-body-secondary">@_pagEntity.Timestamp</span>
        </div>

        <div class="hstack gap-2">
            <a class="btn btn-secondary" href="/games/@GameUrlSegment"><i class="fa-solid fa-arrow-left"></i> Back to Game</a>
            <DeleteButtonWithCheck DeleteWhatLabel="@_pageTitle" ButtonLabel="Delete" ParentPageCallback="DeletePag" />
        </div>

    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
        <a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public AdminLayout Layout { get; set; } = null!;
    
    [Parameter] public string PagUrlSegment { get; set; } = null!;
    
    [Parameter] public string GameUrlSegment { get; set; } = null!;

    private PlayerAtGameEntity _pagEntity = null!;

    private Player _player = null!;

    private string _pageTitle = null!;

    private Game _game = null!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task AddTransactionForPlayer()
    {
        var newTransactionForPag = new Transaction()
            {
                DateTime = DateTime.UtcNow,
                Notes = _game.Notes,
                PlayerId = _player.Id,
                GameId = _game.Id,
                Amount = _player.DefaultRate
            };
        if (TransactionService is not null)
        {
            await TransactionService.UpsertTransactionAsync(newTransactionForPag);
        }
        RefreshData();
    }

    private async Task Edit()
    {
        await PlayerAtGameEntityService.UpsertPlayerAtGameEntityAsync(_pagEntity);
        RefreshData();
    }

    private async Task EditPlayed()
    {
        await PlayerAtGameEntityService.TogglePlayerAtGamePlayedAsync(_pagEntity, _pagEntity.Played);
        RefreshData();
    }

    private async Task DeletePag()
    {
        await PlayerAtGameEntityService.DeletePlayerAtGameEntityAsync(_pagEntity.RowKey);
        Navigation.NavigateTo($"/games/{GameUrlSegment}");
    }

    private void RefreshData()
    {
        _pagEntity = PlayerAtGameEntityService.GetPlayerAtGameEntityByUrlSegment(PagUrlSegment);
        _player = PlayerService.GetPlayer(_pagEntity.PlayerRowKey);
        _game = GameService.GetGame(_pagEntity.GameRowKey);
        _pageTitle = $"{@_player.Name} at {_game.Label}";
        Layout.SetPageTitle(_pageTitle);
    }
}