@page "/admin/playerstochase"
@layout AdminLayout
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject IPlayerAtGameEntityService PlayerAtGameEntityService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-user me-2"></i> @_pageTitle</h1>

<p>Search back to @_startDate.Date.ToShortDateString() for recent games and players.</p>

<InputSelect class="form-select" @bind-Value="_selectedGameRowKey" @bind-Value:after="GameSelected">
    <option value="all">Select Game ...</option>
    @foreach (var game in _recentGames)
    {
        <option value="@game.Id"><GameLink GameLabel="@game.Label" GameUrlSegment="@game.UrlSegment" /></option>
    }
</InputSelect>

<br/>

@foreach (var rp in _recentPlayersNotAtSelectedGame)
{
    <p><PlayerLink PlayerName="@rp.Name" PlayerUrlSegment="@rp.UrlSegment" /> has played @rp.GamesCount times</p>
}

@code {
    [CascadingParameter] public AdminLayout Layout { get; set; } = null!;
    private string _pageTitle = null!;
    private List<Game> _recentGames = null!;
    private string _selectedGameRowKey = null!;
    private List<Player> _recentPlayers = null!;
    private List<Player> _recentPlayersNotAtSelectedGame = null!;
    private DateTime _startDate;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private void GameSelected()
    {
        if (_selectedGameRowKey == "all")
        {
            _recentPlayersNotAtSelectedGame = _recentPlayers;
        }
        else
        {
            var pagsForSelectedGame = PlayerAtGameEntityService.GetPlayerAtGameEntitiesForGame(_selectedGameRowKey);
        
            // Look for recent players which are not Pags
            _recentPlayersNotAtSelectedGame = []; //Reset list to all players
            foreach (var recentPlayer in _recentPlayers)
            {
                if (pagsForSelectedGame.All(p => p.PlayerRowKey != recentPlayer.Id))
                {
                    _recentPlayersNotAtSelectedGame.Add(recentPlayer);
                }
            }
        }
    }
    
    private void RefreshData()
    {
        // Set start date
        _startDate = DateTime.UtcNow.Subtract(new TimeSpan(60, 0, 0, 0));
        
        // Get recent players
        _recentPlayers = PlayerService.GetPlayers(_startDate, DateTime.UtcNow);
        
        // Get recent games
        _recentGames = GameService.GetGames(null, null)
            .Where(g => g.DateTime > _startDate)
            .ToList();
        
        // Set next game as default
        var nextGameEntity = GameService.GetNextGame();
        _selectedGameRowKey = nextGameEntity.Id;
        GameSelected();
        
        _pageTitle = "Players to chase";
        Layout.SetPageTitle(_pageTitle);
    }

}