@page "/admin/ratings"
@layout AdminLayout
@inject IRatingEntityService RatingEntityEntityService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-regular fa-star me-2"></i> @_pageTitle</h1>

<AuthorizeView Policy="IsAdminEmail">
	<Authorized>
		<table class="table table-striped">
			<thead>
				<tr>
					<th scope="col">Timestamp</th>
					<th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => Sort(Enums.SortRatingsBy.Player)">Player</button></th>
					<th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => Sort(Enums.SortRatingsBy.Game)">Game</button></th>
					<th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => Sort(Enums.SortRatingsBy.Rating)">Rating</button></th>
					<th scope="col" class="d-none d-lg-table-cell">Notes</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var re in _pageOfRatingEntities)
				{
					<tr>
						<td><a href="/ratings/@re.UrlSegment">@re.Timestamp!.Value.ToString(Consts.DateTimeFormat)</a> TO DO: Use rating Label from Rating</td>
						<td>@re.PlayerRowKey DO Player Name from Rating</td>
						<td>@re.GameRowKey TO DO Game Title from Rating</td>
						<td>@re.Rating</td>
						<td class="d-none d-lg-table-cell">@re.Notes</td>
					</tr>
				}
			</tbody>
		</table>

		<nav aria-label="Page navigation">
			<ul class="pagination">
				@for (var p = 1; p <= _pages; p++)
				{
					var thisPage = p;
					var css = (_currentPageNumber == p) ? "page-item active" : "page-item";
					<li class="@css"><button class="btn btn-outline-secondary btn-sm me-2 mb-2" @onclick="@(e => ChangePage(thisPage))">@p</button></li>
				}
			</ul>
		</nav>

		<p>@_ratingEntities.Count ratings. @_ratingsPerPage per page.</p>
	</Authorized>
	<NotAuthorized>
		<h4>Access Denied!</h4>
		<a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
	</NotAuthorized>
</AuthorizeView>

@code {
	[CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
	private List<RatingEntity> _ratingEntities = [];

	private List<RatingEntity> _pageOfRatingEntities = [];

	private const int _ratingsPerPage = 40;

	private int _currentPageNumber = 1;

	private int _pages;

	private Enums.SortRatingsBy _currentSortBy;

	private string _pageTitle = default!;

	protected override void OnInitialized()
	{
		RefreshData();
	}

	private void Sort(Enums.SortRatingsBy by)
	{
		switch (by)
		{
			case Enums.SortRatingsBy.Game:
				_ratingEntities = (_currentSortBy == by) ?
					_ratingEntities.OrderByDescending(o => o.GameRowKey).ToList() :
					_ratingEntities.OrderBy(o => o.GameRowKey).ToList();
				break;
			case Enums.SortRatingsBy.Rating:
				_ratingEntities = (_currentSortBy == by) ?
					_ratingEntities.OrderByDescending(o => o.Rating).ToList() :
					_ratingEntities.OrderBy(o => o.Rating).ToList();
				break;
			case Enums.SortRatingsBy.Player:
				_ratingEntities = (_currentSortBy == by) ?
					_ratingEntities.OrderByDescending(o => o.PlayerRowKey).ToList() :
					_ratingEntities.OrderBy(o => o.PlayerRowKey).ToList();
				break;
			default:
				_ratingEntities = _ratingEntities.OrderBy(o => o.Timestamp).ToList();
				break;
		}

		_currentSortBy = by;
	}

	private void ChangePage(int page)
	{
		_currentPageNumber = page;
		_pageOfRatingEntities = _ratingEntities.Skip((page - 1) * _ratingsPerPage).Take(_ratingsPerPage).ToList();
	}

	private void RefreshData()
	{
		_ratingEntities = RatingEntityEntityService.GetRatingEntities();
		_pageTitle = "Ratings";
		MainLayout.SetPageTitle(_pageTitle);

		// Setup paging
		_pageOfRatingEntities = _ratingEntities.Take(_ratingsPerPage).ToList();
		var pagesDec = (double)_ratingEntities.Count / (double)_ratingsPerPage;
		_pages = Convert.ToInt16(Math.Ceiling(pagesDec));
		_currentPageNumber = 1;
	}
}