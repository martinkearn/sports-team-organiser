@page "/backendjobs"
@inject IGameService GameService
@inject IPlayerService PlayerService

<PageTitle>TNF - Backend Jobs</PageTitle>

<button class="btn btn-primary" @onclick="SetUrlSegmentGames"> Set UrlSegment for All Games</button>
<p>@_gamesUpdateCount</p>
<p>@_gamesUpdateStatus</p>

<button class="btn btn-primary" @onclick="SetUrlSegmentPlayers"> Set UrlSegment for All Players</button>
<p>@_playersUpdateCount</p>
<p>@_playersUpdateStatus</p>

<button class="btn btn-primary" @onclick="SetUrlSegmentPags"> Set UrlSegment for All PAGs</button>
<p>@_pagsUpdateCount</p>
<p>@_pagsUpdateStatus</p>

@code {
	private int _pagsUpdateCount = 0;
	private string _pagsUpdateStatus = default!;
	private int _gamesUpdateCount = 0;
	private string _gamesUpdateStatus = default!;
	private int _playersUpdateCount = 0;
	private string _playersUpdateStatus = default!;

	private async Task SetUrlSegmentGames()
	{
		_gamesUpdateStatus = "Start";
		var games = GameService.GetGameEntities();
		foreach (var game in games)
		{
			var gameUrlSegment = game.Date.Date.ToString("dd-MM-yyyy");
			game.UrlSegment = gameUrlSegment;
			await GameService.UpsertGameEntityAsync(game);
			_gamesUpdateCount += 1;
		}
		_gamesUpdateStatus = "Finished";
	}
	
	private async Task SetUrlSegmentPlayers()
	{
		_playersUpdateStatus = "Start";
		var players = PlayerService.GetPlayerEntities();
		foreach (var player in players)
		{
			player.UrlSegment = player.Name.Replace(" ", "-").ToLowerInvariant();
			await PlayerService.UpsertPlayerEntityAsync(player);
			_playersUpdateCount += 1;
		}
		_playersUpdateStatus = "Finished";
	}

	private async Task SetUrlSegmentPags()
	{
		_pagsUpdateStatus = "Start";
		var games = GameService.GetGameEntities();
		foreach (var game in games)
		{
			_pagsUpdateStatus = $"Working on {game.Date.Date.ToShortDateString()}";
			foreach (var pag in GameService.GetPlayerAtGameEntitiesForGame(game.RowKey))
			{
				var player = PlayerService.GetPlayerEntity(pag.PlayerRowKey);
				var pagUrlSegment = $"{player.UrlSegment}-{game.UrlSegment}";
				pag.UrlSegment = pagUrlSegment;
				await GameService.UpsertPlayerAtGameEntityAsync(pag);
				_pagsUpdateCount += 1;
			}
		}
		_pagsUpdateStatus = "Finished";
	}

}
