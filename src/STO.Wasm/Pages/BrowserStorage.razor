@page "/browserstorage"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IPlayerService PlayerService

<h1>Browser Storage</h1>

<h2>Note</h2>
@if (noteContent is not null)
{
    <p>Note: @noteContent</p>
}
else
{
    <p>No 'note' value saved</p>
}
<button class="btn btn-primary" @onclick="ReadNote">Read "note"</button>
<button class="btn btn-primary"@onclick="UpdateNote">Save "note"</button>
<button class="btn btn-secondary"@onclick="ClearNote">Clear "note"</button>

<h2>Players</h2>
<button class="btn btn-primary"@onclick="ReadPlayers">Read "Players"</button>
<button class="btn btn-primary"@onclick="UpdatePlayers">Save "Players"</button>
<button class="btn btn-secondary"@onclick="ClearPlayers">Clear "Players"</button>
<br>
@if (players is not null)
{
    @foreach (var player in players)
    {
        <p>@player.PlayerEntity.Name @player.PlayerEntity.Position</p>
    }
}
else
{
    <p>No 'Players' value saved</p>
}

@code{
    private const string noteKey = "note";
    private const string playersKey = "players";

    string? noteContent;

    private List<Player> players = new();

    protected override async Task OnInitializedAsync()
    {
        await ReadNote();
        await ReadPlayers();
    }

    public async Task ReadNote()
    {
        noteContent = await localStore.GetItemAsStringAsync(noteKey);
    }

    public async Task UpdateNote()
    {
        await localStore.SetItemAsync(noteKey, $"Last updated at {DateTime.UtcNow.ToLongTimeString()}");
        await ReadNote();
    }

    public async Task ClearNote()
    {
        await localStore.RemoveItemAsync(noteKey);
    }

    public async Task ReadPlayers()
    {
        players = await localStore.GetItemAsync<List<Player>>(playersKey);
    }

    public async Task UpdatePlayers()
    {
        var playersFromService = await PlayerService.GetPlayers();
        await localStore.SetItemAsync<List<Player>>(playersKey, playersFromService);
        await ReadPlayers();
    }

    public async Task ClearPlayers()
    {
        await localStore.RemoveItemAsync(playersKey);
    }
}