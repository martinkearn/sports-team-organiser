@page "/games/addtransactionstogame"
@using System.Globalization
@inject IPlayerService PlayerService
@inject IGameEntityService GameEntityService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>@_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @_pageTitle</h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>
        
        <div class="mb-3">
            <label class="form-label">Game</label>
            <InputSelect class="form-select" @bind-Value="_selectedGameRowKey" @bind-Value:after="RefreshGame">
                <option value="">Select Game ...</option>
                @foreach (var ge in _gameEntities)
                {
                    var gameRowKey = ge.RowKey;
                    if (gameRowKey == _nextGameEntity?.RowKey)
                    {
                        <option value="@gameRowKey" selected><EntityTitleLink RowKey="@ge.RowKey" EntityType="Enums.EntityType.GameEntity" Link="false" /></option>
                    }
                    else
                    {
                        <option value="@gameRowKey"><EntityTitleLink RowKey="@ge.RowKey" EntityType="Enums.EntityType.GameEntity" Link="false" /></option>
                    }
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Players to add payments for</label>
            <InputSelect class="form-select" @bind-Value="_selectedProspectPagPlayerRowKey" @bind-Value:after="AddProspectTransaction">
                <option value="" selected>Choose Player ...</option>
                @foreach (var player in _pagPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Prospective Payments</label>
            @foreach (var prospectTransaction in _prospectTransactions)
            {
                var player = PlayerService.GetPlayer(prospectTransaction.PlayerId);
                <p><CurrencyDisplay Amount="@prospectTransaction.Amount" BlackText="true" /> for <PlayerLink PlayerName="@player.Name" PlayerUrlSegment="@player.UrlSegment" /> </p>
            }
        </div>

        @if (_showLongRunning)
        {
            <LongRunning />
        }
        else
        {
            <div class="hstack gap-2">
                <button class="btn btn-secondary" @onclick="AddProspectTransactionsToGame"><i class="fa-solid fa-plus"></i> Add @_prospectTransactions.Count Payments to Game</button>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
        <a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = null!;
    private List<GameEntity> _gameEntities = [];

    private List<Player> _pagPlayers = [];

    private List<Transaction> _prospectTransactions = [];

    private string _selectedProspectPagPlayerRowKey = null!;

    private string _selectedGameRowKey = null!;

    private GameEntity _selectedGame = null!;

    private GameEntity _nextGameEntity = null!;
    
    private bool _showLongRunning;
    
    private string _pageTitle = null!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private void AddProspectTransaction()
    {
        if (string.IsNullOrEmpty(_selectedProspectPagPlayerRowKey)) return;

        var player = PlayerService.GetPlayer(_selectedProspectPagPlayerRowKey);
        var prospectTransaction = new Transaction()
        {
            DateTime = DateTime.UtcNow,
            Notes = $"Added as part of bulk addition {DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)}",
            PlayerId = _selectedProspectPagPlayerRowKey,
            GameId = _selectedGameRowKey,
            Amount = player.DefaultRate,
        };
        _prospectTransactions.Add(prospectTransaction);
    }

    private async Task AddProspectTransactionsToGame()
    {
        if (string.IsNullOrEmpty(_selectedProspectPagPlayerRowKey)) return;

        _showLongRunning = true;
        StateHasChanged();

        foreach (var prospectTransaction in _prospectTransactions)
        {
            await TransactionService.UpsertTransactionAsync(prospectTransaction);
        }
        
        Navigation.NavigateTo($"/games/{_selectedGame.UrlSegment}");
    }

    private void RefreshGame()
    {
        if (string.IsNullOrEmpty(_selectedGameRowKey)) return;
        _selectedGame = GameEntityService.GetGameEntity(_selectedGameRowKey);
        _prospectTransactions.Clear();
        _pagPlayers = PlayerService.GetPlayers(_selectedGameRowKey);
    }

    private void RefreshData()
    {
        _gameEntities = GameEntityService.GetGameEntities();
        _nextGameEntity = GameEntityService.GetNextGameEntity();
        _selectedGameRowKey = _nextGameEntity.RowKey;
        _selectedGame = _nextGameEntity;
        _pageTitle = "Add Transactions to Game";
        MainLayout.SetPageTitle(_pageTitle);
        RefreshGame();
    }

}