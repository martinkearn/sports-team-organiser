@page "/games/{GameUrlSegment}"
@inject IPlayerService PlayerService
@inject IGameService GameService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> <EntityTitleLink RowKey="@_gameEntity.RowKey" EntityType="Enums.EntityType.GameEntity" Link="false" /></h1>

<p>@_pags.Count() players. @_gameEntity.Date.TimeOfDay.Hours:@_gameEntity.Date.TimeOfDay.Minutes kick off.</p>
<p>@_gameEntity.Notes</p>

<div class="row">
    <div class="col">
        <EditForm Model="@_newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group col-12">
                <InputSelect class="form-select" @bind-Value="_newPagEntity.PlayerRowKey">
                    <option value="">Add player to game ...</option>
                    @foreach (var pe in _allPlayerEntities)
                    {
                        if (_pags.FirstOrDefault(pag => pag.PlayerRowKey == pe.RowKey) == default)
                        {
                            <option value="@pe.RowKey">@pe.Name</option>
                        }
                    }
                </InputSelect>
                <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
            </div>
        </EditForm>
    </div>
</div>
<br>

<table class="table table-sm table-borderless">
    <thead>
        <tr>
            <th scope="col">Team</th>
            <th scope="col">Player</th>
            <AuthorizeView Policy="IsAdminEmail">
                <Authorized>
                    @if (!_simpleView)
                    {
                        <th scope="col" class="text-end">Edit</th>
                    }
                </Authorized>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>

    @{
        var teamAPags = _pags.Where(o => o.Team == "A").ToList();
        double teamAAdminRatingTotal = 0;
    }
    @foreach (var pag in teamAPags)
    {
        var pe = PlayerService.GetPlayerEntity(pag.PlayerRowKey);
        teamAAdminRatingTotal += pe.AdminRating;
        <tr>
            <td>A - Non-Bibs</td>
            <td>
                <a class="d-none d-lg-inline" href="/games/@GameUrlSegment/@pag.UrlSegment">@pe.Name</a> <span class="d-inline d-lg-none">@pe.Name</span>
                <PlayingForecastIcon Forecast="@pag.Forecast"/> <PositionIcon Position="pe.Position"/> <RagIcon PagEntity="@pag"/>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@pe.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    @if (teamAPags.Any())
    {
        var teamAAverageRating = teamAAdminRatingTotal / teamAPags.Count();
        <tr>
            <td colspan="3">
                <span>Team A has @teamAPags.Count() players and a rating of @teamAAverageRating.ToString("#.##")</span>
                <hr>
            </td>
        </tr>
    }

    @{
        List<PlayerAtGameEntity> teamBPags = _pags.Where(o => o.Team == "B").ToList();
        double teamBAdminRatingTotal = 0;
    }
    @foreach (var pag in teamBPags)
    {
        var pe = PlayerService.GetPlayerEntity(pag.PlayerRowKey);
        teamBAdminRatingTotal += pe.AdminRating;
        <tr>
            <td>B - Bibs</td>
            <td>
                <a class="d-none d-lg-inline" href="/games/@GameUrlSegment/@pag.UrlSegment">@pe.Name</a> <span class="d-inline d-lg-none">@pe.Name</span>
                <PlayingForecastIcon Forecast="@pag.Forecast"/> <PositionIcon Position="pe.Position"/> <RagIcon PagEntity="@pag"/>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@pe.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    @if (teamBPags.Any())
    {
        var teamBAverageRating = teamBAdminRatingTotal / teamBPags.Count();
        <tr>
            <td colspan="3">
                <span>Team B has @teamBPags.Count() players and a rating of @teamBAverageRating.ToString("#.##")</span>
                <hr>
            </td>
        </tr>
    }
    @foreach (var pag in _pags.Where(o => string.IsNullOrEmpty(o.Team)))
    {
        var pe = PlayerService.GetPlayerEntity(pag.PlayerRowKey);
        <tr>
            <td>None</td>
            <td>
                <a class="d-none d-lg-inline" href="/games/@GameUrlSegment/@pag.UrlSegment">@pe.Name</a> <span class="d-inline d-lg-none">@pe.Name</span>
                <PlayingForecastIcon Forecast="@pag.Forecast"/> <PositionIcon Position="pe.Position"/> <RagIcon PagEntity="@pag"/>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@pe.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@if (_showLongRunning)
{
    <LongRunning />
}
else
{
    <div class="hstack gap-2">
        <a class="btn btn-secondary" href="/games/"><i class="fa-solid fa-arrow-left"></i> All Games</a>
        <a class="btn btn-secondary" href="/games/@GameUrlSegment/edit"><i class="fa-solid fa-edit"></i> Edit</a>
        <AuthorizeView Policy="IsAdminEmail">
            <Authorized>
                <button class="btn btn-secondary" @onclick="ToggleSimpleView"><i class=@_simpleViewCss></i> @_simpleViewLabel</button>
                <button class="btn btn-secondary" @onclick="ToggleAllPlayed"><i class="fa-solid fa-clipboard-list"></i> @_markAllPlayedLabel</button>
                <button class="btn btn-secondary" @onclick="CalculateTeams"><i class="fa-solid fa-gear"></i> Calculate Teams</button>
                <button class="btn btn-secondary" @onclick="ResetTeams"><i class="fa-solid fa-rotate"></i> Reset Teams</button>
            </Authorized>
        </AuthorizeView>
    </div>
}

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
    
    [Parameter] public string GameUrlSegment { get; set; } = default!;

    private GameEntity _gameEntity = default!;

    private List<PlayerAtGameEntity> _pags = default!;

    private List<PlayerEntity> _allPlayerEntities = [];

    private PlayerAtGameEntity _newPagEntity = new();

    private string? _pageTitle = default!;

    private string _markAllPlayedLabel = default!;

    private string _simpleViewLabel = default!;

    private bool _simpleView;

    private string _simpleViewCss = "fa-solid fa-eye-slash";

    private bool _showLongRunning;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task AddPagEntity()
    {
        await GameService.UpsertPlayerAtGameEntityAsync(_newPagEntity);
        RefreshData();
    }

    private async Task CalculateTeams()
    {
        _showLongRunning = true;
        _pags = await GameService.CalculateTeamsAsync(_pags);
        RefreshData();
        _showLongRunning = false;
    }

    private async Task ResetTeams()
    {
        _showLongRunning = true;
        await GameService.ResetTeamsAsync(_gameEntity.RowKey);
        RefreshData();
        _showLongRunning = false;
    }

    private async Task ToggleAllPlayed()
    {
        var played = MarkAsPlayedOrNotPlayed();
        await GameService.MarkAllPlayedAsync(_gameEntity.RowKey, played);
        RefreshData();
    }

    void ToggleSimpleView()
    {
        _simpleView = !_simpleView;
        SetSimpleViewLabel();
    }

    private bool MarkAsPlayedOrNotPlayed()
    {
        var playedPagsCount = _pags.Count(o => o.Played);
        var played = (playedPagsCount == 0);
        return played;
    }

    private void SetSimpleViewLabel()
    {
        // Set simple view label
        if (_simpleView)
        {
            _simpleViewLabel = "Disable Simple View";
            _simpleViewCss = "fa-solid fa-eye";
        }
        else
        {
            _simpleViewLabel = "Enable Simple View";
            _simpleViewCss = "fa-solid fa-eye-slash";
        }
    }

    private void RefreshData()
    {
        _gameEntity = GameService.GetGameEntityByUrlSegment(GameUrlSegment);
        _allPlayerEntities = PlayerService.GetPlayerEntities();
        _pags = GameService.GetPlayerAtGameEntitiesForGame(_gameEntity.RowKey);
        _newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = _gameEntity.RowKey,
            Played = false,
            Forecast = PlayingOptions.Yes.ToString(),
        };
        _pageTitle = GameService.GetGameLabel(_gameEntity.RowKey);
        MainLayout.SetPageTitle(_pageTitle);
        _simpleView = false;

        // Set played button label
        var played = MarkAsPlayedOrNotPlayed();
        _markAllPlayedLabel = (played) ? "Mark all as played" : "Mark all as not played";

        //Set simple view label
        SetSimpleViewLabel();
    }

}