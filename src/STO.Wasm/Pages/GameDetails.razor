@page "/games/{GameRowKey}"
@inject IPlayerEntityService PlayerEntityService
@inject IGameEntityService GameEntityService
@inject NavigationManager Navigation

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> <GameEntityTitle GameEntity="@_game.GameEntity" Link="false" /></h1>

<p>@_game.PlayersAtGame.Count() players. @_game.GameEntity.Date.TimeOfDay.Hours:@_game.GameEntity.Date.TimeOfDay.Minutes kick off.</p>
<p>@_game.GameEntity.Notes</p>

<div class="row">
    <div class="col">
        <EditForm Model="@_newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center" Context="newPagEntity">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group col-12">
                <InputSelect class="form-select" @bind-Value="_newPagEntity.PlayerRowKey">
                    <option value="">Add player to game ...</option>
                    @foreach (var pe in _playerEntities)
                    {
                        if (_game.PlayersAtGame.FirstOrDefault(pag => pag.PlayerRowKey == pe.RowKey) == default)
                        {
                            <option value="@pe.RowKey">@pe.Name</option>
                        }
                    }
                </InputSelect>
                <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
            </div>
        </EditForm>
    </div>
</div>
<br>

<table class="table table-sm table-borderless">
    <thead>
        <tr>
            <th scope="col">Team</th>
            <th scope="col">Player</th>
            <AuthorizeView Policy="IsAdminEmail">
                <Authorized>
                    @if (!_simpleView)
                    {
                        <th scope="col" class="text-end">Edit</th>
                    }
                </Authorized>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>
        @foreach (var pag in _game.TeamA)
        {
            var pe = PlayerEntityService.GetPlayerEntity(pag.PlayerRowKey);
            
            <tr>
                <td>A - Non-Bibs</td>
                <td>
                    <a class="d-none d-lg-inline" href="/pags/@pag.RowKey">@pe.Name</a> <span class="d-inline d-lg-none">@pe.Name</span>
                    <PlayingForecastIcon Forecast="@pag.Forecast" /> <PositionIcon Position="pe.Position" /> <RagIcon PagEntity="@pag" />
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            @if (!_simpleView)
                            {
                                <RatingNumberIcon Rating=@pe.AdminRating />
                            }
                        </Authorized>
                    </AuthorizeView>
                </td>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        <td class="text-end">
                            @if (!_simpleView)
                            {
                                <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshGameData" />
                            }
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
        @if (_game.TeamA.Count > 0)
        {
            <tr>
                <td colspan="3">
                    <TeamPlayers Pags="_game.TeamA" TeamName="Team A" />
                    <hr>
                </td>
            </tr>
        }
        @foreach (var pag in _game.TeamB)
        {
            var pe = PlayerEntityService.GetPlayerEntity(pag.PlayerRowKey);
            
            <tr>
                <td>B - Bibs</td>
                <td>
                    <a class="d-none d-lg-inline" href="/pags/@pag.RowKey">@pe.Name</a> <span class="d-inline d-lg-none">@pe.Name</span>
                    <PlayingForecastIcon Forecast="@pag.Forecast" /> <PositionIcon Position="pe.Position" /> <RagIcon PagEntity="@pag" />
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            @if (!_simpleView)
                            {
                                <RatingNumberIcon Rating=@pe.AdminRating />
                            }
                        </Authorized>
                    </AuthorizeView>
                </td>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        <td class="text-end">
                            @if (!_simpleView)
                            {
                                <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshGameData" />
                            }
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
        @if (_game.TeamB.Count > 0)
        {
            <tr>
                <td colspan="3">
                    <TeamPlayers Pags="_game.TeamB" TeamName="Team B" />
                    <hr>
                </td>
            </tr>
        }
        @foreach (var pag in _game.PlayersAtGame.Where(o => string.IsNullOrEmpty(o.Team)))
        {
            var pe = PlayerEntityService.GetPlayerEntity(pag.PlayerRowKey);
            <tr>
                <td>None</td>
                <td>
                    <a class="d-none d-lg-inline" href="/pags/@pag.RowKey">@pe.Name</a> <span class="d-inline d-lg-none">@pe.Name</span>
                    <PlayingForecastIcon Forecast="@pag.Forecast" /> <PositionIcon Position="pe.Position" /> <RagIcon PagEntity="@pag" />
                    <AuthorizeView Policy="IsAdminEmail">
                        <Authorized>
                            @if (!_simpleView)
                            {
                                <RatingNumberIcon Rating=@pe.AdminRating />
                            }
                        </Authorized>
                    </AuthorizeView>
                </td>
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        <td class="text-end">
                            @if (!_simpleView)
                            {
                                <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshGameData" />
                            }
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
    </tbody>
</table>

<div class="modal-footer px-0">
    <a class="btn btn-primary" href="/games/"><i class="fa-solid fa-arrow-left"></i>All Games</a>
    <a class="btn btn-primary" href="/games/@GameRowKey/edit"><i class="fa-solid fa-edit"></i>Edit</a>
    <AuthorizeView Policy="IsAdminEmail">
        <Authorized>
            <button class="btn btn-primary" @onclick="ToggleSimpleView"><i class=@_simpleViewCss></i> @_simpleViewLabel</button>
            <button class="btn btn-primary" @onclick="ToggleAllPlayed"><i class="fa-solid fa-clipboard-list"></i> @_markAllPlayedLabel</button>
            <button class="btn btn-primary" @onclick="CalculateTeams"><i class="fa-solid fa-gear"></i> Calculate Teams</button>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; } = default!;

    private Game _game = default!;

    private List<PlayerEntity> _playerEntities = [];

    private PlayerAtGameEntity _newPagEntity = default!;

    private string _pageTitle = default!;

    private string _markAllPlayedLabel = default!;

    private string _simpleViewLabel = default!;

    private bool _simpleView;

    private string _simpleViewCss = "fa-solid fa-eye-slash";

    protected override void OnInitialized()
    {
        RefreshGameData();
    }

    private async Task AddPagEntity()
    {
        await GameEntityService.UpsertPlayerAtGameEntityAsync(_newPagEntity);
        RefreshGameData();
    }

    private async Task CalculateTeams()
    {
        var playersAtGameWithTeams = await GameEntityService.CalculateTeamsAsync(_game.PlayersAtGame);
        _game.TeamA = playersAtGameWithTeams
        	.Where(pag => pag.Team == "A")
        	.ToList();
        _game.TeamB = playersAtGameWithTeams
        	.Where(pag => pag.Team == "B")
        	.ToList();

        RefreshGameData();
    }

    private async Task ToggleAllPlayed()
    {
        var played = MarkAsPLayedOrNotPLayed();
        await GameEntityService.MarkAllPlayedAsync(_game.GameEntity.RowKey, played);
        RefreshGameData();
    }

    void ToggleSimpleView()
    {
        _simpleView = !_simpleView;
        SetSimpleViewLabel();
    }

    private bool MarkAsPLayedOrNotPLayed()
    {
        var playedPagsCount = _game.PlayersAtGame.Count(o => o.Played);
        var played = (playedPagsCount == 0);
        return played;
    }

    private void SetSimpleViewLabel()
    {
        // Set simple view label
        if (_simpleView)
        {
            _simpleViewLabel = "Disable Simple View";
            _simpleViewCss = "fa-solid fa-eye";
        }
        else
        {
            _simpleViewLabel = "Enable Simple View";
            _simpleViewCss = "fa-solid fa-eye-slash";
        }
    }

    private void RefreshGameData()
    {
        _playerEntities = PlayerEntityService.GetPlayerEntities();
        _game = GameEntityService.GetGame(GameRowKey);
        _newPagEntity = new PlayerAtGameEntity()
            {
                GameRowKey = _game.GameEntity.RowKey,
                Played = false,
                Forecast = PlayingOptions.Yes.ToString(),
            };
        _pageTitle = _game.GameEntity.Date.ToString("dd MMM");
        _simpleView = false;

        // Set played button label
        var played = MarkAsPLayedOrNotPLayed();
        _markAllPlayedLabel = (played) ? "Mark all as played" : "Mark all as not played";

        //Set simple view label
        SetSimpleViewLabel();
    }
}