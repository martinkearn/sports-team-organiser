@page "/games/{GameUrlSegment}"
@inject IPlayerService PlayerService
@inject IGameEntityService GameEntityService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> <EntityTitleLink RowKey="@_gameEntity.RowKey" EntityType="Enums.EntityType.GameEntity" Link="false" /></h1>

<p>
    @_pags.Count() players. @_pags.Count(p => p.Forecast == Enums.PlayingStatus.Yes) yes, @_pags.Count(p => p.Forecast == Enums.PlayingStatus.Maybe) maybe, @_pags.Count(p => p.Forecast == Enums.PlayingStatus.No) no. @_gameEntity.Date.TimeOfDay.Hours:@_gameEntity.Date.TimeOfDay.Minutes kick off.
    @if (_mostRecentPag != default)
    {
        var localTime = _mostRecentPag.Timestamp?.ToLocalTime();
        <span>Last player added @localTime?.ToString("ddd HH:mm")</span>
    }
</p>
@if (!string.IsNullOrEmpty(_gameEntity.Notes))
{
    <p>@_gameEntity.Notes</p>
}

<div class="row">
    <div class="col">
        <EditForm Model="@_newPagEntity" OnValidSubmit="AddPagEntity" class="row row-cols-lg-auto g-3 align-items-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group col-12">
                <InputSelect class="form-select" @bind-Value="_newPagEntity.PlayerRowKey">
                    <option value="">Add player to game ...</option>
                    @foreach (var player in _allPlayers.Where(pe => _pags.FirstOrDefault(pag => pag.PlayerRowKey == pe.Id) == default))
                    {
                        <option value="@player.Id">@player.Name</option>
                    }
                </InputSelect>
                <button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-plus"></i></button>
            </div>
        </EditForm>
    </div>
</div>
<br>

<table class="table table-sm table-borderless">
    <tbody>
    
    <tr>
        <td colspan="2"><h2>Team A</h2></td>
    </tr>
    <tr>
        <td colspan="2">
            <span>Team A has @_teamAPags.Count() players and a rating of @_teamARating</span>
        </td>
    </tr>
    @foreach (var pag in _teamAPags)
    {
        var player = _teamAPlayers.Single(p => p.Id == pag.PlayerRowKey);
        <tr>
            <td>
                <a href="/games/@_gameEntity.UrlSegment/@pag.UrlSegment">@player.Name</a>
                <PlayingForecastIcon Forecast="@pag.Forecast"/>
                <PositionIcon Position="player.Position"/>
                <RagIcon Balance="player.Balance" Played="pag.Played" DefaultRate="player.DefaultRate" PlayerRowKey="@player.Id" />
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@player.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    <tr>
        <td colspan="2">
            <hr>
        </td>
    </tr>
    
    @*TEAM B*@
    @{
        var teamBPags = _pags
            .Where(p => p.Team == "B")
            .Where(p => p.Forecast == Enums.PlayingStatus.Yes)
            .ToList();
        double teamBAdminRatingTotal = 0;
    }
    <tr>
        <td colspan="2"><h2>Team B</h2></td>
    </tr>
    <tr>
        <td colspan="2">
            <span>Team B has @teamBPags.Count() players and a rating of ?? Team B wears bibs.</span>
        </td>
    </tr>
    @foreach (var pag in teamBPags)
    {
        var player = PlayerService.GetPlayer(pag.PlayerRowKey);
        teamBAdminRatingTotal += player.AdminRating;
        var teamBAverageRating = teamBAdminRatingTotal / teamBPags.Count();
        <tr>
            <td>
                <a href="/games/@_gameEntity.UrlSegment/@pag.UrlSegment">@player.Name</a>
                <PlayingForecastIcon Forecast="@pag.Forecast"/>
                <PositionIcon Position="player.Position"/>
                <RagIcon Balance="player.Balance" Played="pag.Played" DefaultRate="player.DefaultRate" PlayerRowKey="@player.Id" />
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@player.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    <tr>
        <td colspan="2">
            <hr>
        </td>
    </tr>

    @*Yes No TEAM*@
    @{
        var yesNoTeamPags = _pags
            .Where(p => p.Team == "")
            .Where(p => p.Forecast == Enums.PlayingStatus.Yes)
            .ToList();
    }
    <tr>
        <td colspan="2"><h2>No Team</h2></td>
    </tr>
    <tr>
        <td colspan="2">
            <span>@yesNoTeamPags.Count() players are playing but have not yet got a team.</span>
        </td>
    </tr>
    @foreach (var pag in yesNoTeamPags)
    {
        var player = PlayerService.GetPlayer(pag.PlayerRowKey);
        <tr>
            <td>
                <a href="/games/@_gameEntity.UrlSegment/@pag.UrlSegment">@player.Name</a>
                <PlayingForecastIcon Forecast="@pag.Forecast"/>
                <PositionIcon Position="player.Position"/>
                <RagIcon Balance="player.Balance" Played="pag.Played" DefaultRate="player.DefaultRate" PlayerRowKey="@player.Id" />
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@player.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    <tr>
        <td colspan="2">
            <hr>
        </td>
    </tr>

    @*Maybe*@
    @{
        var includedForecast = new[] { Enums.PlayingStatus.Maybe, Enums.PlayingStatus.Reserve1, Enums.PlayingStatus.Reserve2, Enums.PlayingStatus.Reserve3, Enums.PlayingStatus.Reserve4, Enums.PlayingStatus.Reserve5 };
        var maybePags = _pags.Where(p => includedForecast.Contains(p.Forecast)).ToList();
    }
    <tr>
        <td colspan="2"><h2>Maybe & Reserve</h2></td>
    </tr>
    <tr>
        <td colspan="2">
            <span>@maybePags.Count() players are maybe or reserve.</span>
        </td>
    </tr>
    @foreach (var pag in maybePags)
    {
        var player = PlayerService.GetPlayer(pag.PlayerRowKey);
        <tr>
            <td>
                <a href="/games/@_gameEntity.UrlSegment/@pag.UrlSegment">@player.Name</a>
                <PlayingForecastIcon Forecast="@pag.Forecast"/>
                <PositionIcon Position="player.Position"/>
                <RagIcon Balance="player.Balance" Played="pag.Played" DefaultRate="player.DefaultRate" PlayerRowKey="@player.Id" />
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@player.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    <tr>
        <td colspan="2">
            <hr>
        </td>
    </tr>

    @*No*@
    @{
        var noPags = _pags.Where(p => p.Forecast == Enums.PlayingStatus.No).ToList();
    }
    <tr>
        <td colspan="2"><h2>Not Playing</h2></td>
    </tr>
    <tr>
        <td colspan="2">
            <span>@noPags.Count() players are not playing.</span>
        </td>
    </tr>
    @foreach (var pag in noPags)
    {
        var player = PlayerService.GetPlayer(pag.PlayerRowKey);
        <tr>
            <td>
                <a href="/games/@_gameEntity.UrlSegment/@pag.UrlSegment">@player.Name</a>
                <PlayingForecastIcon Forecast="@pag.Forecast"/>
                <PositionIcon Position="player.Position"/>
                <RagIcon Balance="player.Balance" Played="pag.Played" DefaultRate="player.DefaultRate" PlayerRowKey="@player.Id" />
                <AuthorizeView Policy="IsAdminEmail">
                    <Authorized>
                        @if (!_simpleView)
                        {
                            <RatingNumberIcon Rating=@player.AdminRating/>
                        }
                    </Authorized>
                </AuthorizeView>
            </td>
            <td class="text-end">
                @if (!_simpleView)
                {
                    <PagRowEditButtons PagEntity="@pag" RefreshMainPage="RefreshData"/>
                }
            </td>
        </tr>
    }
    <tr>
        <td colspan="2">
            <hr>
        </td>
    </tr>
    </tbody>
</table>

@if (_showLongRunning)
{
    <LongRunning />
}
else
{
    <div class="hstack gap-2">
        <a class="btn btn-secondary" href="/games/" title="All Games"><i class="fa-solid fa-arrow-left"></i> <span class="d-none d-md-inline">All Games</span></a>
        <a class="btn btn-secondary" href="/games/@GameUrlSegment/edit" title="Edit"><i class="fa-solid fa-edit"></i> <span class="d-none d-md-inline">Edit</span></a>
        <AuthorizeView Policy="IsAdminEmail">
            <Authorized>
                <button class="btn btn-secondary" @onclick="ToggleSimpleView" title="@_simpleViewLabel"><i class=@_simpleViewCss></i> <span class="d-none d-md-inline">@_simpleViewLabel</span></button>
                <button class="btn btn-secondary" @onclick="CalculateTeams" title="Calculate Teams"><i class="fa-solid fa-gear"></i> <span class="d-none d-md-inline">Calculate Teams</span></button>
                <button class="btn btn-secondary" @onclick="ResetTeams" title="Reset Teams"><i class="fa-solid fa-rotate"></i> <span class="d-none d-md-inline">Reset Teams</span></button>
            </Authorized>
        </AuthorizeView>
    </div>
}

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;

    [Parameter] public string GameUrlSegment { get; set; } = default!;

    private GameEntity _gameEntity = default!;

    private List<PlayerAtGameEntity> _pags = default!;

    private List<Player> _allPlayers = [];

    private PlayerAtGameEntity _newPagEntity = new();

    private PlayerAtGameEntity? _mostRecentPag;

    private string? _pageTitle;

    private string _simpleViewLabel = default!;

    private bool _simpleView;

    private string _simpleViewCss = "fa-solid fa-eye-slash";

    private bool _showLongRunning;

    private List<PlayerAtGameEntity> _teamAPags;
    private List<Player> _teamAPlayers;
    private double _teamARating;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task AddPagEntity()
    {
        await GameEntityService.UpsertPlayerAtGameEntityAsync(_newPagEntity);
        RefreshData();
    }

    private async Task CalculateTeams()
    {
        _showLongRunning = true;
        _pags = await GameEntityService.CalculateTeamsAsync(_pags);
        RefreshData();
        _showLongRunning = false;
    }

    private async Task ResetTeams()
    {
        _showLongRunning = true;
        await GameEntityService.ResetTeamsAsync(_gameEntity.RowKey);
        RefreshData();
        _showLongRunning = false;
    }

    void ToggleSimpleView()
    {
        _simpleView = !_simpleView;
        SetSimpleViewLabel();
    }

    private void SetSimpleViewLabel()
    {
        // Set simple view label
        if (_simpleView)
        {
            _simpleViewLabel = "Disable Simple";
            _simpleViewCss = "fa-solid fa-eye";
        }
        else
        {
            _simpleViewLabel = "Enable Simple";
            _simpleViewCss = "fa-solid fa-eye-slash";
        }
    }

    private void RefreshData()
    {
        _gameEntity = GameEntityService.GetGameEntityByUrlSegment(GameUrlSegment);
        _allPlayers = PlayerService.GetPlayers();
        var gamePlayers = PlayerService.GetPlayers(_gameEntity.RowKey);
        _pags = GameEntityService.GetPlayerAtGameEntitiesForGame(_gameEntity.RowKey);
        _newPagEntity = new PlayerAtGameEntity()
        {
            GameRowKey = _gameEntity.RowKey,
            Played = false,
            Forecast = Enums.PlayingStatus.Yes, 
            Team = string.Empty
        };
        _pageTitle = GameEntityService.GetGameLabel(_gameEntity.RowKey);
        MainLayout.SetPageTitle(_pageTitle);
        _simpleView = false;
        _mostRecentPag = GameEntityService.GetMostRecentPlayerAtGameForGame(_gameEntity.RowKey);
        
        //Team A
        _teamAPags = _pags
            .Where(p => p.Team == "A")
            .Where(p => p.Forecast == Enums.PlayingStatus.Yes)
            .ToList();
        _teamAPlayers = gamePlayers
            .Where(player => _teamAPags.Any(atGame => atGame.PlayerRowKey == player.Id))
            .ToList();
        _teamARating = Math.Round(_teamAPlayers.Average(p => p.AdminRating), 1);
        
        //Set simple view label
        SetSimpleViewLabel();
        
        // Refresh blazor state
        StateHasChanged(); 
    }

}