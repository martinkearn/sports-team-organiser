@page "/games/{GameUrlSegment}"
@inject IPlayerService PlayerService
@inject IGameEntityService GameEntityService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> <EntityTitleLink RowKey="@_gameEntity.RowKey" EntityType="Enums.EntityType.GameEntity" Link="false" /></h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>

        @if (_showLongRunning)
        {
            <LongRunning />
        }
        else
        {
            <p>
                @_pags.Count() players. @_pags.Count(p => p.Forecast == Enums.PlayingStatus.Yes) yes, @_pags.Count(p => p.Forecast == Enums.PlayingStatus.Maybe) maybe, @_pags.Count(p => p.Forecast == Enums.PlayingStatus.No) no. @_gameEntity.Date.TimeOfDay.Hours:@_gameEntity.Date.TimeOfDay.Minutes kick off.
                @if (_mostRecentPag != default)
                {
                    var localTime = _mostRecentPag.Timestamp?.ToLocalTime();
                    <span>Last player added @localTime?.ToString("ddd HH:mm")</span>
                }
            </p>
            @if (!string.IsNullOrEmpty(_gameEntity.Notes))
            {
                <p>@_gameEntity.Notes</p>
            }

            <table class="table table-sm table-borderless">
                <tbody>

                @*TEAM A*@
                <PagGroup 
                    Label="A" 
                    Rating="@_teamARating" 
                    Pags="@_teamAPags" 
                    Players="@_teamAPlayers" 
                    GameUrlSegment="@_gameEntity.UrlSegment" 
                    SimpleView="@_simpleView" 
                    RefreshMainPage="RefreshData" />

                @*TEAM B*@
                <PagGroup
                    Label="B"
                    Rating="@_teamBRating"
                    Pags="@_teamBPags"
                    Players="@_teamBPlayers"
                    GameUrlSegment="@_gameEntity.UrlSegment"
                    SimpleView="@_simpleView"
                    RefreshMainPage="RefreshData" />

                @*Yes No TEAM*@
                <PagGroup
                    Label="Playing with no team"
                    Pags="@_noTeamPags"
                    Players="@_noTeamPlayers"
                    GameUrlSegment="@_gameEntity.UrlSegment"
                    SimpleView="@_simpleView"
                    RefreshMainPage="RefreshData" />

                @*Maybe*@
                <PagGroup
                    Label="Maybe & Reserve"
                    Pags="@_maybeReservePags"
                    Players="@_maybeReservePlayers"
                    GameUrlSegment="@_gameEntity.UrlSegment"
                    SimpleView="@_simpleView"
                    RefreshMainPage="RefreshData" />

                @*No*@
                <PagGroup
                    Label="No"
                    Pags="@_noPags"
                    Players="@_noPlayers"
                    GameUrlSegment="@_gameEntity.UrlSegment"
                    SimpleView="@_simpleView"
                    RefreshMainPage="RefreshData" />

                </tbody>
            </table>
            
            <div class="hstack gap-2">
                <a class="btn btn-secondary" href="/games/" title="All Games"><i class="fa-solid fa-arrow-left"></i> <span class="d-none d-md-inline">All Games</span></a>
                <a class="btn btn-secondary" href="/games/@GameUrlSegment/edit" title="Edit"><i class="fa-solid fa-edit"></i> <span class="d-none d-md-inline">Edit</span></a>
                <a class="btn btn-secondary" href="/games/addplayerstogame" title="Edit"><i class="fa-solid fa-plus"></i> <span class="d-none d-md-inline">Add Player</span></a>
                <button class="btn btn-secondary" @onclick="ToggleSimpleView" title="@_simpleViewLabel"><i class=@_simpleViewCss></i> <span class="d-none d-md-inline">@_simpleViewLabel</span></button>
                <button class="btn btn-secondary" @onclick="CalculateTeams" title="Calculate Teams"><i class="fa-solid fa-gear"></i> <span class="d-none d-md-inline">Calculate Teams</span></button>
                <button class="btn btn-secondary" @onclick="ResetTeams" title="Reset Teams"><i class="fa-solid fa-rotate"></i> <span class="d-none d-md-inline">Reset Teams</span></button>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
        <a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;

    [Parameter] public string GameUrlSegment { get; set; } = default!;

    private GameEntity _gameEntity = default!;

    private List<PlayerAtGameEntity> _pags = default!;

    private PlayerAtGameEntity? _mostRecentPag;

    private string? _pageTitle;

    private string _simpleViewLabel = default!;

    private bool _simpleView;

    private string _simpleViewCss = "fa-solid fa-eye-slash";

    private bool _showLongRunning;

    private List<PlayerAtGameEntity>? _teamAPags ;
    private List<Player>? _teamAPlayers;
    private double _teamARating;
    
    private List<PlayerAtGameEntity>? _teamBPags;
    private List<Player>? _teamBPlayers;
    private double _teamBRating;
    
    private List<PlayerAtGameEntity>? _noTeamPags;
    private List<Player>? _noTeamPlayers;
    
    private List<PlayerAtGameEntity>? _maybeReservePags;
    private List<Player>? _maybeReservePlayers;
    
    private List<PlayerAtGameEntity>? _noPags;
    private List<Player>? _noPlayers;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task CalculateTeams()
    {
        _showLongRunning = true;
        _pags = await GameEntityService.CalculateTeamsAsync(_pags);
        RefreshData();
        _showLongRunning = false;
    }

    private async Task ResetTeams()
    {
        _showLongRunning = true;
        await GameEntityService.ResetTeamsAsync(_gameEntity.RowKey);
        RefreshData();
        _showLongRunning = false;
    }

    void ToggleSimpleView()
    {
        _simpleView = !_simpleView;
        SetSimpleViewLabel();
    }

    private void SetSimpleViewLabel()
    {
        // Set simple view label
        if (_simpleView)
        {
            _simpleViewLabel = "Disable Simple";
            _simpleViewCss = "fa-solid fa-eye";
        }
        else
        {
            _simpleViewLabel = "Enable Simple";
            _simpleViewCss = "fa-solid fa-eye-slash";
        }
    }

    private void RefreshData()
    {
        _gameEntity = GameEntityService.GetGameEntityByUrlSegment(GameUrlSegment);
        var gamePlayers = PlayerService.GetPlayers(_gameEntity.RowKey);
        _pags = GameEntityService.GetPlayerAtGameEntitiesForGame(_gameEntity.RowKey);
        _mostRecentPag = GameEntityService.GetMostRecentPlayerAtGameForGame(_gameEntity.RowKey);
        
        //Team A
        _teamAPags = _pags
            .Where(p => p.Team == "A")
            .Where(p => p.Forecast == Enums.PlayingStatus.Yes)
            .ToList();
        _teamAPlayers = gamePlayers
                .Where(player => _teamAPags.Any(atGame => atGame.PlayerRowKey == player.Id))
                .ToList();
        if (_teamAPags.Count != 0)
        {
            _teamARating = Math.Round(_teamAPlayers.Average(p => p.AdminRating), 1);
        }
        else
        {
            _teamARating = 0;
        }

        //Team B
        _teamBPags = _pags
            .Where(p => p.Team == "B")
            .Where(p => p.Forecast == Enums.PlayingStatus.Yes)
            .ToList();
        _teamBPlayers = gamePlayers
            .Where(player => _teamBPags.Any(atGame => atGame.PlayerRowKey == player.Id))
            .ToList();
        if (_teamBPags.Count != 0)
        {
            _teamBRating = Math.Round(_teamBPlayers.Average(p => p.AdminRating), 1);
        }
        else
        {
            _teamBRating = 0;
        }
        
        //Yes, no team
        _noTeamPags = _pags
            .Where(p => p.Team == string.Empty)
            .Where(p => p.Forecast == Enums.PlayingStatus.Yes)
            .ToList();
        _noTeamPlayers = gamePlayers
            .Where(player => _noTeamPags.Any(atGame => atGame.PlayerRowKey == player.Id))
            .ToList();
        
        //Maybe reserve team
        var includedForecast = new[] { Enums.PlayingStatus.Maybe, Enums.PlayingStatus.Reserve1, Enums.PlayingStatus.Reserve2, Enums.PlayingStatus.Reserve3, Enums.PlayingStatus.Reserve4, Enums.PlayingStatus.Reserve5 };
        _maybeReservePags = _pags.Where(p => includedForecast.Contains(p.Forecast)).ToList();
        _maybeReservePlayers = gamePlayers
            .Where(player => _maybeReservePags.Any(atGame => atGame.PlayerRowKey == player.Id))
            .ToList();
        
        //No team
        _noPags = _pags.Where(p => p.Forecast == Enums.PlayingStatus.No).ToList();
        _noPlayers = gamePlayers
            .Where(player => _noPags.Any(atGame => atGame.PlayerRowKey == player.Id))
            .ToList();
        
        //Set simple view label
        SetSimpleViewLabel();
        
        _pageTitle = GameEntityService.GetGameLabel(_gameEntity.RowKey);
        MainLayout.SetPageTitle(_pageTitle);
        _simpleView = false;
        
        // Refresh blazor state
        StateHasChanged(); 
    }

}