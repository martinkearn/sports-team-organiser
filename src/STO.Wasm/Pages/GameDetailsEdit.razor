@page "/games/{GameDateLabel}/edit"
@inject IGameService GameService
@inject NavigationManager Navigation

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> Edit <GameEntityTitle GameEntity="@_gameEntity" Link="false" /></h1>

<div class="mb-3">
    <label for="addDate" class="form-label">Date</label>
    <InputDate class="form-control" @bind-Value="_gameEntity.Date" />
</div>
<div class="mb-3">
    <label for="addDate" class="form-label">Time</label>
    <div class="row">
        <div class="col-auto">
            <div class="input-group">
                <InputNumber class="form-control" min="0" max="23" @bind-Value="_hour" @bind-Value:after="() => Edit()" />
                <InputNumber class="form-control" min="0" max="59" @bind-Value="_minute" @bind-Value:after="() => Edit()" />
            </div>
        </div>
    </div>
</div>

<div class="mb-3">
    <label class="form-label">Title</label>
    <InputText class="form-control" @bind-Value="_gameEntity.Title" @bind-Value:after="() => Edit()" />
</div>

<div class="mb-3">
    <label class="form-label">Notes</label>
    <InputText class="form-control" @bind-Value="_gameEntity.Notes" @bind-Value:after="() => Edit()" />
</div>

<div class="hstack gap-2">
    <a class="btn btn-secondary" href="/games/@GameDateLabel"><i class="fa-solid fa-arrow-left"></i>Back to Game</a>

    <AuthorizeView Policy="IsAdminEmail">
        <Authorized>
            <DeleteButtonWithCheck @rendermode="RenderMode.InteractiveAuto" DeleteWhatLabel="@_pageTitle" ButtonLabel="Delete" ParentPageCallback="DeleteGame" />
        </Authorized>
        <NotAuthorized>
            <a class="btn btn-secondary disabled"><i class="fa-solid fa-trash"></i> Delete</a>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
    [Parameter] public string GameDateLabel { get; set; } = default!;

    private GameEntity _gameEntity = default!;

    private int _hour;

    private int _minute;

    private string _pageTitle = default!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task Edit()
    {
        var dt = new DateTime(_gameEntity.Date.Year, _gameEntity.Date.Month, _gameEntity.Date.Day, _hour, _minute, 0, DateTimeKind.Utc);
        _gameEntity.Date = dt;
        await GameService.UpsertGameEntityAsync(_gameEntity);
    }

    private async Task DeleteGame()
    {
        await GameService.DeleteGameEntityAsync(GameDateLabel);
        Navigation.NavigateTo("/games");
    }

    private void RefreshData()
    {
        _gameEntity = GameService.GetGameEntityByGameDateLabel(GameDateLabel);
        _hour = _gameEntity.Date.Hour;
        _minute = _gameEntity.Date.Minute;

        var gameDateLabel = GameService.GetGameLabel(_gameEntity.RowKey);
        _pageTitle = string.IsNullOrEmpty(_gameEntity.Title) ? gameDateLabel : $"{gameDateLabel} {_gameEntity.Title}";
        MainLayout.SetPageTitle(_pageTitle);
    }
}