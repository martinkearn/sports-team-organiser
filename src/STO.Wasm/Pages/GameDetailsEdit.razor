@page "/games/{GameRowKey}/edit"
@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> Edit <GameTitle Game="@game" Link="false" /></h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>

        <div class="mb-3">
            <label for="addDate" class="form-label">Date</label>
            <InputDate class="form-control" @bind-Value="game.GameEntity.Date" />
        </div>

        <div class="mb-3">
            <label for="addDate" class="form-label">Time</label>
            <div class="row">
                <div class="col-auto">
                    <div class="input-group">
                        <InputNumber class="form-control" min="0" max="23"  @bind-Value="hour" @bind-Value:after="() => Edit()" />
                        <InputNumber class="form-control" min="0" max="59" @bind-Value="minute" @bind-Value:after="() => Edit()" />
                    </div>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Title</label>
            <InputText class="form-control" @bind-Value="game.GameEntity.Title" @bind-Value:after="() => Edit()" />
        </div>

        <div class="mb-3">
            <label class="form-label">Notes</label>
            <InputText class="form-control" @bind-Value="game.GameEntity.Notes" @bind-Value:after="() => Edit()" />
        </div>
            
    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
    </NotAuthorized>
</AuthorizeView>

<div class="modal-footer px-0">
    <a class="btn btn-secondary" href="/games/@GameRowKey"><i class="fa-solid fa-arrow-left"></i>Back to Game</a>
    <DeleteButtonWithCheck DeleteWhatLabel="@pageTitle" ButtonLabel="Delete" ParentPageCallback="DeleteGame" />
</div>

@code {
    [Parameter]
    public string GameRowKey { get; set; }

    private Game game;

    private int hour;

    private int minute;

    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        await RefreshGameData();
    }

    async Task Edit()
    {
        var dt = new DateTime(game.GameEntity.Date.Year, game.GameEntity.Date.Month, game.GameEntity.Date.Day, hour, minute, 0, DateTimeKind.Utc);
        game.GameEntity.Date = dt;
        await GameService.UpsertGameEntity(game.GameEntity);
    }

    private async Task DeleteGame()
    {
        await GameService.DeleteGame(GameRowKey);
        Navigation.NavigateTo("/games");
    }

    async Task RefreshGameData()
    {
        game = await GameService.GetGame(GameRowKey);
        hour = game.GameEntity.Date.Hour;
        minute = game.GameEntity.Date.Minute;

        var gameDateLabel = game.GameEntity.Date.ToString("dd MMM");
        pageTitle = string.IsNullOrEmpty(game.GameEntity.Title) ? gameDateLabel : $"{gameDateLabel} {game.GameEntity.Title}";

        this.StateHasChanged();
    }
}