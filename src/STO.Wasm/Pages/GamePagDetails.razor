@page "/games/{GameUrlSegment}/{PagUrlSegment}"
@inject IGameEntityService GameEntityService
@inject ITransactionEntityService TransactionEntityService
@inject IPlayerEntityService PlayerEntityService
@inject NavigationManager Navigation

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-people-group me-2"></i> @_pageTitle</h1>

<div class="mb-3">
    <label class="form-label">Player Name</label>
    <span class="form-control-plaintext"><EntityTitleLink EntityType="Enums.EntityType.PlayerEntity" RowKey="@_playerEntity.RowKey" Link="true" /></span>
</div>

<div class="mb-3">
    <label class="form-label">Last Updated</label>
    <span class="form-control-plaintext">@_pagEntity.Timestamp</span>
</div>

<div class="mb-3">
    <label class="form-label">Url Segment</label>
    <span class="form-control-plaintext" disabled="true">@_pagEntity.UrlSegment</span>
    <div class="form-text">Set automatically.</div>
</div>

<div class="mb-3">
    <label class="form-label">Game</label>
    <span class="form-control-plaintext"><EntityTitleLink RowKey="@_gameEntity.RowKey" EntityType="Enums.EntityType.GameEntity" Link="true" /></span>
</div>

<div class="mb-3">
    <label class="form-label">Playing Forecast</label>
    <InputSelect class="form-select" @bind-Value=_pagEntity.Forecast @bind-Value:after="Edit">
        @foreach (var playingStatus in Enum.GetValues<Enums.PlayingStatus>())
        {
            <option value="@playingStatus">@playingStatus</option>
        }
    </InputSelect>
</div>

<div class="mb-3">
    <label class="form-label">Played</label>
    <InputSelect class="form-select" @bind-Value=_pagEntity.Played @bind-Value:after="EditPlayed">
        <option value="true">Yes</option>
        <option value="false">No</option>
    </InputSelect>
</div>

<div class="mb-3">
    <label class="form-label">Team</label>
    <InputSelect class="form-select" @bind-Value=_pagEntity.Team @bind-Value:after="Edit">
        <option value="A">Team A</option>
        <option value="B">Team B</option>
        <option value="">No Team</option>
    </InputSelect>
</div>

<div class="mb-3">
    <label class="form-label">Add Payment</label>
    <br>
    <button class="btn btn-outline-secondary" @onclick="AddTransactionForPlayer"><i class="fa-solid fa-plus"></i> @_playerEntity.DefaultRate</button>
    <br>
    <span>Balance: <CurrencyDisplay Amount="@_playerEntityBalance" /></span>
</div>

<div class="hstack gap-2">
    <a class="btn btn-secondary" href="/games/@GameUrlSegment"><i class="fa-solid fa-arrow-left"></i> Back to Game</a>
    <DeleteButtonWithCheck DeleteWhatLabel="@_pageTitle" ButtonLabel="Delete" ParentPageCallback="DeletePag" />
</div>

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
    
    [Parameter] public string PagUrlSegment { get; set; } = default!;
    
    [Parameter] public string GameUrlSegment { get; set; } = default!;

    private PlayerAtGameEntity _pagEntity = default!;

    private PlayerEntity _playerEntity = default!;

    private double _playerEntityBalance;

    private string _pageTitle = default!;

    private GameEntity _gameEntity = default!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task AddTransactionForPlayer()
    {
        var newTransactionEntityForPag = new TransactionEntity()
            {
                Date = DateTimeOffset.UtcNow,
                Notes = GameEntityService.GetNotesForGame(_pagEntity.GameRowKey),
                PlayerRowKey = _playerEntity.RowKey,
                Amount = _playerEntity.DefaultRate
            };
        if (TransactionEntityService is not null)
        {
            await TransactionEntityService.UpsertTransactionEntityAsync(newTransactionEntityForPag);
        }
        RefreshData();
    }

    private async Task Edit()
    {
        await GameEntityService.UpsertPlayerAtGameEntityAsync(_pagEntity);
        RefreshData();
    }

    private async Task EditPlayed()
    {
        await GameEntityService.TogglePlayerAtGamePlayedAsync(_pagEntity, _pagEntity.Played);
        RefreshData();
    }

    private async Task DeletePag()
    {
        await GameEntityService.DeletePlayerAtGameEntityAsync(_pagEntity.RowKey);
        Navigation.NavigateTo($"/games/{GameUrlSegment}");
    }

    private void RefreshData()
    {
        _pagEntity = GameEntityService.GetPlayerAtGameEntityByUrlSegment(PagUrlSegment);
        _playerEntity = PlayerEntityService.GetPlayerEntity(_pagEntity.PlayerRowKey);
        _playerEntityBalance = PlayerEntityService.GetBalanceForPlayerEntity(_pagEntity.PlayerRowKey);
        _gameEntity = GameEntityService.GetGameEntity(_pagEntity.GameRowKey);
        var gameLabel = GameEntityService.GetGameLabel(_gameEntity.RowKey);
        _pageTitle = $"{@_playerEntity.Name} at {gameLabel}";
        MainLayout.SetPageTitle(_pageTitle);
    }

}