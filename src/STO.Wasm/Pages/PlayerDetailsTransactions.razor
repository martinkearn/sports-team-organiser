@page "/players/{PlayerUrlSegment}/transactions"
@inject IDataService DataService
@inject IPlayerEntityService PlayerEntityService
@inject ITransactionEntityService TransactionEntityService
@inject NavigationManager Navigation


<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-user me-2"></i> @_pageTitle</h1>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" @onclick="SwitchTabPlayer">Player</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">Transactions</a>
    </li>
</ul>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Amount</th>
            <th scope="col" class="d-none d-lg-table-cell">Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transactionEntity in _playerTransactions)
        {
            <tr>
                <td><EntityTitleLink EntityType="Enums.EntityType.TransactionEntity" RowKey="@transactionEntity.RowKey" Length="Enums.TitleLength.Long" Link="true" /></td>
                <td><CurrencyDisplay Amount="@transactionEntity.Amount" /></td>
                <td class="d-none d-lg-table-cell">@transactionEntity.Notes</td>
            </tr>
        }
    </tbody>
</table>

<div class="hstack gap-2">
    <a class="btn btn-secondary" href="/players/"><i class="fa-solid fa-arrow-left"></i> All Players</a>
    <DeleteButtonWithCheck DeleteWhatLabel="@_deleteAllLabel" ButtonLabel="Delete all transactions" ParentPageCallback="DeleteTransactionsForPlayer" />
</div>

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
    
    [Parameter] public string PlayerUrlSegment { get; set; } = default!;

    private List<TransactionEntity> _playerTransactions = [];

    private string _pageTitle = default!;

    private string _deleteAllLabel = default!;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private async Task DeleteTransactionsForPlayer()
    {
        foreach (var te in _playerTransactions)
        {
            await TransactionEntityService.DeleteTransactionEntityAsync(te.RowKey);
        }

        Navigation.NavigateTo("/players");
    }

    private void SwitchTabPlayer() => Navigation.NavigateTo($"/players/{@PlayerUrlSegment}");

    private void RefreshData()
    {
        // Get Player
        var playerEntity = PlayerEntityService.GetPlayerEntityFromUrlSegment(PlayerUrlSegment);

        // Get Transactions
        _playerTransactions = DataService.TransactionEntities.Where(o => o.PlayerRowKey == playerEntity.RowKey)
            .OrderByDescending(o => o.Date)
            .ToList();

        _deleteAllLabel = $"All transactions for {playerEntity?.Name}";
        _pageTitle = $"{playerEntity?.Name}";
        MainLayout.SetPageTitle(_pageTitle);
    }
}