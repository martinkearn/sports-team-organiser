@page "/playerstochase"
@inject IPlayerService PlayerService
@inject IGameService GameService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-user me-2"></i> @_pageTitle</h1>

<h2>Recent Games</h2>
@foreach (var game in _recentGames)
{
    <p><EntityTitleLink EntityType="Enums.EntityType.GameEntity" RowKey="@game.RowKey" /></p>
}

<h2>Recent Players</h2>
<p>Times players have played in the last @_recentGames.Count() games</p>
@foreach (var recentPagsForPlayer in _recentPags)
{
    var player = PlayerService.GetPlayerEntity(recentPagsForPlayer.Key);
    <p><EntityTitleLink EntityType="Enums.EntityType.PlayerEntity" RowKey="@player.RowKey" /> has played @recentPagsForPlayer.Count() times.</p>
}

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = default!;
    private List<IGrouping<string, PlayerAtGameEntity>> _recentPags = default!;
    private string _pageTitle = default!;
    private List<GameEntity> _recentGames = default!;

    protected override void OnInitialized()
    {
        _recentGames = GameService.GetGameEntities()
            .OrderByDescending(g => g.Date)
            .Take(10)
            .ToList();
  
        var pagsInRecentGames = GameService.GetPlayerAtGameEntities()
            .Where(o => _recentGames.Select(g => g.RowKey).Contains(o.GameRowKey));
        
        _recentPags = pagsInRecentGames
            .GroupBy(p => p.PlayerRowKey)   // Group by the PlayerRowKey property
            .OrderByDescending(g => g.Count())  // Sort by the volume of occurrences (group count)
            .ToList();
        
        _pageTitle = "Players to chase";
        MainLayout.SetPageTitle(_pageTitle);
    }
}