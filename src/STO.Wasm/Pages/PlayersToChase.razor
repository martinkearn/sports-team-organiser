@page "/playerstochase"
@inject IPlayerService PlayerService
@inject IGameEntityService GameEntityService
@inject IPlayerAtGameEntityService PlayerAtGameEntityService

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-solid fa-user me-2"></i> @_pageTitle</h1>

<AuthorizeView Policy="IsAdminEmail">
    <Authorized>

        <p>Search back to @_startDate.Date.ToShortDateString() for recent games and players.</p>

        <InputSelect class="form-select" @bind-Value="_selectedGameRowKey" @bind-Value:after="GameSelected">
            <option value="all">Select Game ...</option>
            @foreach (var game in _recentGames)
            {
                <option value="@game.RowKey">
                    <EntityTitleLink EntityType="Enums.EntityType.GameEntity" RowKey="@game.RowKey" Link="false" />
                </option>
            }
        </InputSelect>

        <br/>
        @if (string.IsNullOrEmpty(_selectedGameLabel))
        {
            <p>All recent players:</p>
        }
        else
        {
            <p>Recent players not playing at @_selectedGameLabel:</p>
        }

        @foreach (var rp in _recentPlayersNotAtSelectedGame)
        {
            <p><PlayerLink PlayerName="@rp.Name" PlayerUrlSegment="@rp.UrlSegment" /> has played @rp.GamesCount times</p>
        }

    </Authorized>
    <NotAuthorized>
        <h4>Access Denied!</h4>
        <a class="btn btn-secondary" href="authentication/login"><i class="fa-solid fa-key me-2"></i> Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; } = null!;
    private string _pageTitle = null!;
    private List<GameEntity> _recentGames = null!;
    private string _selectedGameRowKey = null!;
    private string _selectedGameLabel = null!;
    private List<Player> _recentPlayers = null!;
    private List<Player> _recentPlayersNotAtSelectedGame = null!;
    private DateTime _startDate;

    protected override void OnInitialized()
    {
        RefreshData();
    }

    private void GameSelected()
    {
        if (_selectedGameRowKey == "all")
        {
            _selectedGameLabel = string.Empty;
            _recentPlayersNotAtSelectedGame = _recentPlayers;
        }
        else
        {
            _selectedGameLabel = GameEntityService.GetGameLabel(_selectedGameRowKey); //TO DO: This should be built into the GameEntity object as a property which is set every time the date or Title properties change
            var pagsForSelectedGame = PlayerAtGameEntityService.GetPlayerAtGameEntitiesForGame(_selectedGameRowKey);
        
            // Look for recent players which are not Pags
            _recentPlayersNotAtSelectedGame = []; //Reset list to all players
            foreach (var recentPlayer in _recentPlayers)
            {
                if (pagsForSelectedGame.All(p => p.PlayerRowKey != recentPlayer.Id))
                {
                    _recentPlayersNotAtSelectedGame.Add(recentPlayer);
                }
            }
        }
    }
    
    private void RefreshData()
    {
        // Set start date
        _startDate = DateTime.UtcNow.Subtract(new TimeSpan(30, 0, 0, 0));
        
        // Get recent players
        _recentPlayers = PlayerService.GetPlayers(_startDate, DateTime.UtcNow);
        
        // Get recent games
        _recentGames = GameEntityService.GetGameEntities()
            .Where(g => g.Date > _startDate)
            .OrderByDescending(g => g.Date)
            .ToList();
        
        // Set next game as default
        var nextGameEntity = GameEntityService.GetNextGameEntity();
        _selectedGameRowKey = nextGameEntity.RowKey;
        GameSelected();
        
        _pageTitle = "Players to chase";
        MainLayout.SetPageTitle(_pageTitle);
    }

}