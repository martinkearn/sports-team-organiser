@page "/ratings/add"
@inject IRatingEntityService RatingEntityEntityService
@inject IGameService GameService
@inject IPlayerAtGameEntityService PlayerAtGameEntityService
@inject NavigationManager Navigation

<PageTitle>TNF - @_pageTitle</PageTitle>

<h1><i class="fa-regular fa-star me-2"></i> @_pageTitle</h1>

<p>Ratings are used to help the system work out balanced teams.</p>
<p>Players will never be shown individual ratings and only the top-rated players will be visisble in terms of leaderboards, never the bottom-rated players.</p>
<p>Submit a rating based only on a player's performance during a specfic game in comparison to other players in the same position at the same game.</p>
<p>Try not to allow biases towards a player come into your rating; think only about a specific game and the impact the player had on the game in their position.</p>

<EditForm Model="@_newRatingEntity" OnValidSubmit="Add" Context="newRatingEntity">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label for="addGameRowKey" class="form-label">Game</label>
		<InputSelect class="form-select" @bind-Value="_newRatingEntity.GameRowKey">
			<option value="">Select Game ...</option>
			@foreach (var game in _games)
			{
				<option value="@game.Id"><GameLink GameLabel="@game.Label" GameUrlSegment="@game.UrlSegment" /></option>
			}
		</InputSelect>
	</div>

	<div class="mb-3">
		<label for="addPlayerRowKey" class="form-label">Player</label>
		<InputSelect class="form-select" @bind-Value="_newRatingEntity.PlayerRowKey">
			<option value="">Select Player ...</option>
			@{
				if (_newRatingEntity.GameRowKey != null)
				{
					//var game = _games.Single<Game>(g => g.Id == _newRatingEntity.GameRowKey);
					_playersAtGameEntities = PlayerAtGameEntityService.GetPlayerAtGameEntitiesForGame(_newRatingEntity.GameRowKey);
				}
			}
			@foreach (var pag in _playersAtGameEntities)
			{
				<option value="@pag.PlayerRowKey"><EntityTitleLink EntityType="Enums.EntityType.PlayerAtGameEntity" RowKey="@pag.RowKey" Link="false" Length="Enums.TitleLength.Long" /></option>
			}
		</InputSelect>
	</div>

	<div class="mb-3">
		<label for="addRating" class="form-label">Rating (1-5)</label>
		<InputSelect class="form-select" @bind-Value="_newRatingEntity.Rating">
			<option value="">Select Rating ...</option>
			<option value="1">1</option>
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
		</InputSelect>
	</div>

	<div class="mb-3">
		<label for="addNotes" class="form-label">Notes</label>
		<InputText class="form-control" id="addNotes" @bind-Value="_newRatingEntity.Notes" />
	</div>

	<div class="hstack gap-2">
		<button type="submit" class="btn btn-secondary"><i class="fa-solid fa-plus"></i> Add Rating</button>
	</div>
</EditForm>


@code {
	[CascadingParameter] public MainLayout MainLayout { get; set; } = null!;
	
	private List<Game> _games = [];

	private List<PlayerAtGameEntity> _playersAtGameEntities = [];

	private RatingEntity _newRatingEntity = new();

	private string _pageTitle = null!;

	protected override void OnInitialized()
	{
		RefreshData();
	}

	protected async Task Add()
	{
		await RatingEntityEntityService.UpsertRatingEntityAsync(_newRatingEntity);
		Navigation.NavigateTo("/ratings/addthanks");
	}

	private void RefreshPlayers()
	{
		if (_newRatingEntity.GameRowKey != null)
		{
			var game = _games.Single<Game>(g => g.Id == _newRatingEntity.GameRowKey);
			_playersAtGameEntities = PlayerAtGameEntityService.GetPlayerAtGameEntitiesForGame(game.Id);
		}
	}

	private void RefreshData()
	{
		_games = GameService.GetGames(null, null);
		_pageTitle = "Add Rating";
		MainLayout.SetPageTitle(_pageTitle);
	}
}