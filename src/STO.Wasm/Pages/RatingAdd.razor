@page "/ratings/add"
@inject IRatingEntityService RatingEntityService
@inject IGameEntityService GameEntityService
@inject NavigationManager Navigation

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-regular fa-star me-2"></i> @pageTitle</h1>

<p>Ratings are used to help the system work out balanced teams.</p>
<p>Players will never be shown individual ratings and only the top-rated players will be visisble in terms of leaderboards, never the bottom-rated players.</p>
<p>Submit a rating based only on a player's performance during a specfic game in comparison to other players in the same position at the same game.</p>
<p>Try not to allow biases towards a player come into your rating; think only about a specific game and the impact the player had on the game in their position.</p>

<EditForm Model="@newRatingEntity" OnValidSubmit="Add" Context="NewRatingEntity">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label for="addGameRowKey" class="form-label">Game</label>
		<InputSelect class="form-select" @bind-Value="newRatingEntity.GameRowKey">
			<option value="">Select Game ...</option>
			@foreach (var ge in gameEntities)
			{
				<option value="@ge.RowKey"><GameEntityTitle GameEntity="@ge" Link="false" /></option>
			}
		</InputSelect>
	</div>

	<div class="mb-3">
		<label for="addPlayerRowKey" class="form-label">Player</label>
		<InputSelect class="form-select" @bind-Value="newRatingEntity.PlayerRowKey">
			<option value="">Select Player ...</option>
			@{
				if (newRatingEntity.GameRowKey != default)
				{
					var game = gameEntities.Single<GameEntity>(o => o.RowKey == newRatingEntity.GameRowKey);
					playersAtGameEntities = GameEntityService.GetPlayerAtGameEntitiesForGame(game.RowKey);
				}
			}
			@foreach (var pag in playersAtGameEntities)
			{
				<option value="@pag.PlayerRowKey">@pag.PlayerRowKey - TO DO make this player name and position</option>
			}
		</InputSelect>
	</div>

	<div class="mb-3">
		<label for="addRating" class="form-label">Rating (1-5)</label>
		<InputSelect class="form-select" @bind-Value="newRatingEntity.Rating">
			<option value="">Select Rating ...</option>
			<option value="1">1</option>
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
		</InputSelect>
	</div>

	<div class="mb-3">
		<label for="addNotes" class="form-label">Notes</label>
		<InputText class="form-control" id="addNotes" @bind-Value="newRatingEntity.Notes" />
	</div>

	<div class="modal-footer">
		<button type="submit" class="btn btn-primary"><i class="fa-solid fa-plus"></i> Add Rating</button>
	</div>
</EditForm>


@code {
	private List<GameEntity> gameEntities = new();

	private List<PlayerAtGameEntity> playersAtGameEntities = new();

	private RatingEntity newRatingEntity = new();

	private string pageTitle = default!;

	protected override void OnInitialized()
	{
		RefreshData();
	}

	protected async Task Add()
	{
		await RatingEntityService.UpsertRatingEntityAsync(newRatingEntity);
		Navigation.NavigateTo("/ratings/addthanks");
	}

	private void RefreshPlayers()
	{
		if (newRatingEntity.GameRowKey != default)
		{
			var game = gameEntities.Single<GameEntity>(o => o.RowKey == newRatingEntity.GameRowKey);
			playersAtGameEntities = GameEntityService.GetPlayerAtGameEntitiesForGame(game.RowKey);
		}
	}

	private void RefreshData()
	{
		gameEntities = GameEntityService.GetGameEntities();
		pageTitle = "Add Rating";
	}
}