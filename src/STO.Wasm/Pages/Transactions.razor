@page "/transactions"
@inject ITransactionEntityService TransactionEntityService

<PageTitle>TNF - @pageTitle</PageTitle>

<h1><i class="fa-solid fa-coins me-2"></i> @pageTitle</h1>

<div>
	<a class="btn btn-primary me-3 mb-3" href="/transactions/add"><i class="fa-solid fa-plus"></i> Add Transaction</a>
</div>

<table class="table table-striped">
	<thead>
		<tr>
			<th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Date)">Date</button></th>
			<th scope="col"><button class="btn btn-link m-0 p-0" @onclick="() => SortTransactions(Enums.SortTransactionsBy.Amount)">Amount</button></th>
			<th scope="col" class="d-none d-lg-table-cell">Player</th>
			<th scope="col" class="d-none d-lg-table-cell">Notes</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var te in pageOfTransactionEntities)
		{
			<tr>
				<td><a href="/transactions/@te.RowKey">@te.Date.ToString("dd MMM yyyy HH:mm")</a></td>
				<td><CurrencyDisplay Amount="@te.Amount" /></td>
				<td class="d-none d-lg-table-cell"><PlayerName Link="true" PlayerRowKey="@te.PlayerRowKey" /></td>
				<td class="d-none d-lg-table-cell">@te.Notes</td>
			</tr>
		}
	</tbody>
</table>

<nav aria-label="Page navigation">
	<ul class="pagination">
		@for (int p = 1; p <= pages; p++)
		{
			var thisPage = p;
			var css = (currentPageNumber == p) ? "page-item active" : "page-item";
			<li class="@css"><a class="page-link" @onclick="@(e => ChangePage(thisPage))">@p</a></li>
		}
	</ul>
</nav>

<p>@transactionEntities.Count transactions. @transactionsPerPage per page.</p>


@code {
	private List<TransactionEntity> transactionEntities = new();

	private List<TransactionEntity> pageOfTransactionEntities = new();

	private int transactionsPerPage = 40;

	private int currentPageNumber = 1;

	private int pages = default!;

	private Enums.SortTransactionsBy currentSortBy = default!;

	private string pageTitle = default!;

	protected override void OnInitialized()
	{
		RefreshData();
	}

	private void SortTransactions(Enums.SortTransactionsBy by)
	{
		switch (by)
		{
			case Enums.SortTransactionsBy.Date:
				transactionEntities = (currentSortBy == by) ?
					transactionEntities.OrderByDescending(o => o.Date.Date).ToList() :
					transactionEntities.OrderBy(o => o.Date.Date).ToList();
				break;
			case Enums.SortTransactionsBy.Amount:
				transactionEntities = (currentSortBy == by) ?
					transactionEntities.OrderByDescending(o => o.Amount).ToList() :
					transactionEntities.OrderBy(o => o.Amount).ToList();
				break;
			default:
				transactionEntities = transactionEntities.OrderBy(o => o.Date.Date).ToList();
				break;
		}

		currentSortBy = by;
	}

	private void ChangePage(int page)
	{
		currentPageNumber = page;
		pageOfTransactionEntities = transactionEntities.Skip((page - 1) * transactionsPerPage).Take(transactionsPerPage).ToList();
	}

	private void RefreshData()
	{
		transactionEntities = TransactionEntityService.GetTransactionEntities();
		pageTitle = "Transactions";

		// Setup paging
		pageOfTransactionEntities = transactionEntities.Take(transactionsPerPage).ToList();
		var pagesDec = (double)transactionEntities.Count / (double)transactionsPerPage;
		pages = Convert.ToInt16(Math.Ceiling(pagesDec));
		currentPageNumber = 1;
	}
}