@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService

<div class="row pb-2">
    <div class="col">
        <AuthorizeView Policy="IsAdminEmail">
            <Authorized>
                <a class="d-none d-lg-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a> <span class="d-inline d-lg-none">@pag.Player.PlayerEntity.Name</span> 
            </Authorized>
            <NotAuthorized>
                <span>@pag.Player.PlayerEntity.Name</span>
            </NotAuthorized>
        </AuthorizeView>
        <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /> <RagIcon Pag="@pag" />
    </div>
    <AuthorizeView Policy="IsAdminEmail">
        <Authorized>
            <div class="col text-end">
                <button type="button" class="btn btn-outline-secondary btn-sm @playedButtonCss d-none d-lg-inline" data-bs-toggle="button" @onclick="() => TogglePlayed()">@playedButtonLabel</button>
                <button class="btn btn-outline-secondary btn-sm d-none d-lg-inline" @onclick="() => SwitchPagTeam()">@pag.PlayerAtGameEntity.Team <i class="fa-solid fa-repeat"></i></button>
                <button class="btn btn-outline-secondary btn-sm d-none d-lg-inline" @onclick="() => AddTransactionForPlayer(pag.Player.PlayerEntity.DefaultRate)"><i class="fa-solid fa-plus"></i> Â£@pag.Player.PlayerEntity.DefaultRate</button>
                <a type="button" class="btn btn-outline-secondary btn-sm d-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey"><i class="fa-solid fa-edit"></i> Edit</a>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public PlayerAtGame pag { get; set; }

    [Parameter]
    public EventCallback RefreshMainPage { get; set; }

    private string playedButtonLabel = "Not Played";
    private string playedButtonCss = "";

    protected override async Task OnParametersSetAsync()
    {
    }

    protected async override Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task TogglePlayed()
    {
        await GameService.TogglePlayerAtGamePlayed(pag.PlayerAtGameEntity, default);
        if (pag.PlayerAtGameEntity.Played)
        {
            playedButtonLabel = "Played";
            playedButtonCss = "active";
        }
        else
        {
            playedButtonLabel = "Not Played";
            playedButtonCss = "";
        }
        await RefreshMainPage.InvokeAsync();
    }

    async Task SwitchPagTeam()
    {
        if (pag.PlayerAtGameEntity.Team == "A")
        {
            pag.PlayerAtGameEntity.Team = "B";
        }
        else if (pag.PlayerAtGameEntity.Team == "B")
        {
            pag.PlayerAtGameEntity.Team = "";
        }
        else
        {
            pag.PlayerAtGameEntity.Team = "A";
        }
        await GameService.UpsertPlayerAtGameEntity(pag.PlayerAtGameEntity);
        await RefreshMainPage.InvokeAsync();
    }

    private async Task AddTransactionForPlayer(double amount)
    {
        var newTransactionEntityForPag = new TransactionEntity()
        {
            Date = DateTimeOffset.UtcNow,
            Notes = TransactionService.GetNotesForGame(pag.GameEntity.RowKey),
            PlayerRowKey = pag.Player.PlayerEntity.RowKey,
            Amount = amount
        };
        await TransactionService.UpsertTransactionEntity(newTransactionEntityForPag);
        await RefreshMainPage.InvokeAsync();
    }

    async Task RefreshData()
    {
        if (pag.PlayerAtGameEntity.Played)
        {
            playedButtonLabel = "Played";
            playedButtonCss = "active";
        }
        else
        {
            playedButtonLabel = "Not Played";
            playedButtonCss = "";
        }
        var game = await GameService.GetGame(pag.GameEntity.RowKey);
        pag = game.PlayersAtGame.Single(o => o.Player.PlayerEntity.RowKey == pag.Player.PlayerEntity.RowKey);
        await RefreshMainPage.InvokeAsync();
    }

}