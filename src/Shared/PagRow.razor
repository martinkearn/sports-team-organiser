@inject IPlayerService PlayerService
@inject IGameService GameService
@inject ITransactionService TransactionService

<div class="row pb-2">
    <div class="col">
        <a class="d-none d-lg-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey">@pag.Player.PlayerEntity.Name</a> <span class="d-inline d-lg-none">@pag.Player.PlayerEntity.Name</span> <PlayingForecastIcon Forecast="@pag.PlayerAtGameEntity.Forecast" /> <PositionIcon Position="pag.Player.PlayerEntity.Position" /> <RagIcon Pag="@pag" />
    </div>
    <div class="col text-end">
        <button type="button" class="btn btn-outline-secondary btn-sm @playedButtonCss d-none d-lg-inline" data-bs-toggle="button" @onclick="() => TogglePlayed()">@playedButtonLabel</button>
        <button class="btn btn-outline-secondary btn-sm d-none d-lg-inline" @onclick="() => SwitchPagTeam()">@pag.PlayerAtGameEntity.Team <i class="fa-solid fa-repeat"></i></button>
        <button class="btn btn-outline-secondary btn-sm d-none d-lg-inline" @onclick="() => AddTransactionForPlayer(pag.Player.PlayerEntity.DefaultRate)"><i class="fa-solid fa-plus"></i> £@pag.Player.PlayerEntity.DefaultRate</button>
        <a type="button" class="btn btn-outline-secondary btn-sm d-inline" href="/pags/@pag.PlayerAtGameEntity.RowKey"><i class="fa-solid fa-edit"></i> Edit</a>
    </div>
</div>

@code {
    [Parameter]
    public PlayerAtGame pag { get; set; }

    [Parameter]
    public EventCallback RefreshMainPage { get; set; }

    private string playedButtonLabel = "Not Played";
    private string playedButtonCss = "";

    async Task TogglePlayed()
    {
        // Get player for pag
        var player = PlayerService.GetPlayer(pag.PlayerAtGameEntity.PlayerRowKey);

        pag.PlayerAtGameEntity.Played = !pag.PlayerAtGameEntity.Played;

        // Add / remove transactions if played / not played
        if (pag.PlayerAtGameEntity.Played)
        {
            playedButtonLabel = "Played";
            playedButtonCss = "active";

            var transaction = new TransactionEntity()
            {
                PlayerRowKey = pag.PlayerAtGameEntity.PlayerRowKey,
                Amount = -player.PlayerEntity.DefaultRate,
                Date = DateTimeOffset.UtcNow,
                Notes = TransactionService.GetNotesForGame(pag.PlayerAtGameEntity.GameRowKey)
            };
            await TransactionService.UpsertTransactionEntity(transaction);
        }
        else
        {
            playedButtonLabel = "Not Played";
            playedButtonCss = "";

            // Get debit transactions (less than £0) for player and game
            var pagDebitTransactionEntities = player.Transactions
                .Where(o => o.Amount < 0);
            foreach (var pagDebitTransactionEntity in pagDebitTransactionEntities)
            {
                await TransactionService.DeleteTransactionEntity(pagDebitTransactionEntity.RowKey);
            }
        }

        // Upsert pag
        await GameService.UpsertPlayerAtGameEntity(pag.PlayerAtGameEntity);

        await RefreshData();
    }

    async Task SwitchPagTeam()
    {
        if (pag.PlayerAtGameEntity.Team == "A")
        {
            pag.PlayerAtGameEntity.Team = "B";
        }
        else if (pag.PlayerAtGameEntity.Team == "B")
        {
            pag.PlayerAtGameEntity.Team = "";
        }
        else
        {
            pag.PlayerAtGameEntity.Team = "A";
        }
        await GameService.UpsertPlayerAtGameEntity(pag.PlayerAtGameEntity);
        await RefreshData();
    }

    private async Task AddTransactionForPlayer(double amount)
    {
        var newTransactionEntityForPag = new TransactionEntity()
        {
            Date = DateTimeOffset.UtcNow,
            Notes = TransactionService.GetNotesForGame(pag.GameEntity.RowKey),
            PlayerRowKey = pag.Player.PlayerEntity.RowKey,
            Amount = amount
        };
        await TransactionService.UpsertTransactionEntity(newTransactionEntityForPag);
        await RefreshData();
    }

    async Task RefreshData()
    {
        var game = await GameService.GetGame(pag.GameEntity.RowKey);
        pag = game.PlayersAtGame.Single(o => o.Player.PlayerEntity.RowKey == pag.Player.PlayerEntity.RowKey);
        await RefreshMainPage.InvokeAsync();
    }

}